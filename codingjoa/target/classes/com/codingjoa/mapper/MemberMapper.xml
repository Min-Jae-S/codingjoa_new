<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.MemberMapper">

	<insert id="saveMember" parameterType="member">
		INSERT INTO member (
			member_idx,
			member_id,
			member_password,
			member_email,
			member_zipcode,
			member_addr,
			member_addr_detail,
			member_agree,
			regdate,
			moddate
		) VALUES (
			seq_member.NEXTVAL,
			#{memberId},
			#{memberPassword},
			#{memberEmail},
			#{memberZipcode},
			#{memberAddr},
			#{memberAddrDetail},
			#{memberAgree},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<insert id="saveAuth" parameterType="auth">
		INSERT INTO auth (
			auth_idx,
			member_id,
			member_role
		) VALUES (
			seq_auth.NEXTVAL,
			#{memberId},
			#{memberRole}
		)
	</insert>
	
	<select id="isIdExist" parameterType="string" resultType="boolean">
		SELECT
			COUNT(*)
		FROM
			member
		WHERE
			member_id = #{memberId}
	</select>
	
	<select id="findMemberByEmail" parameterType="string" resultType="member">
		SELECT
			*
		FROM
			member
		WHERE	
			member_email = #{memberEmail}
	</select>

	<resultMap id="userDetailsMap" type="map">
		<result property="memberRole" column="member_role"/>
		<result property="memberImageName" column="member_image_name"/>
		<association property="member" javaType="member">
			<id property="memberIdx" column="member_idx"/>
			<result property="memberId" column="member_id"/>
			<result property="memberPassword" column="member_password"/>
			<result property="memberEmail" column="member_email"/>
			<result property="memberZipcode" column="member_zipcode"/>
			<result property="memberAddr" column="member_addr"/>
			<result property="memberAddrDetail" column="member_addr_detail"/>
			<result property="memberAgree" column="member_agree"/>
			<result property="regdate" column="regdate"/>
			<result property="moddate" column="moddate"/>
		</association>
		<collection property="myBoardLikes" javaType="list" ofType="int">
			<result column="board_idx"/>
		</collection>
		<collection property="myCommentLikes" javaType="list" ofType="int">
			<result column="comment_idx"/>
		</collection>
	</resultMap>
	
	<select id="findUserDetailsById" parameterType="string" resultMap="userDetailsMap">
		SELECT 
			a.*,
			b.member_role,
			c.board_idx,
			d.comment_idx,
			e.member_image_name
		FROM
			member a
		INNER JOIN
			auth b
		ON
			a.member_id = b.member_id
		LEFT OUTER JOIN
			board_likes c
		ON
			a.member_idx = c.member_idx
		LEFT OUTER JOIN
			comment_likes d
		ON
			a.member_idx = d.member_idx
		LEFT OUTER JOIN
			member_image e
		ON
			a.member_idx = e.member_idx
		WHERE
			a.member_id = #{memberId}
	</select>
	
	<select id="findMemberByIdx" parameterType="int" resultType="member">
		SELECT
			*
		FROM
			member
		WHERE
			member_idx = #{memberIdx}
	</select>
	
	<update id="updateEmail" parameterType="member">
		UPDATE 
			member
		SET
			member_email = #{memberEmail},
			moddate = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="updateAddr" parameterType="member">
		UPDATE 
			member
		SET
			member_zipcode = #{memberZipcode},
			member_addr = #{memberAddr},
			member_addr_detail = #{memberAddrDetail},
			moddate = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>

	<update id="updateAgree" parameterType="member">
		UPDATE 
			member
		SET
			member_agree = #{memberAgree},
			moddate = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="updatePassword" parameterType="member">
		UPDATE 
			member
		SET
			member_password = #{memberPassword},
			moddate = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<select id="findMemeberByIdAndEmail" parameterType="map" resultType="member">
		SELECT
			*
		FROM
			member
		WHERE
			member_id = #{memberId}
			AND
			member_email = #{memberEmail}
	</select>
	
</mapper>