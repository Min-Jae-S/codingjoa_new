<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.UserMapper">
<!--
## users
    id                  NUMBER,
    email               VARCHAR2(100)   UNIQUE  NOT NULL,
    password            VARCHAR2(200)           NULL,
    nickname            VARCHAR2(50)    UNIQUE  NOT NULL,
    zipcode             CHAR(5)                 NULL,
    addr                VARCHAR2(150)           NULL,
    addr_detail         VARCHAR2(150)           NULL,
    agree               CHAR(1)                 NOT NULL,
    created_at          DATE                    NOT NULL,
    updated_at          DATE                    NOT NULL,
    
## auth
    id          NUMBER,
    user_id     NUMBER          NOT NULL,
    role        VARCHAR2(30)    NOT NULL,
    created_at  DATE            NOT NULL,
    
## sns_info
	id              NUMBER,
	user_id         NUMBER              NOT NULL,
    sns_id          VARCHAR2(200)       NOT NULL,
	provider        VARCHAR2(20)        NOT NULL,
    connected_at    DATE                NULL,
	created_at      DATE                NOT NULL,
-->

	<insert id="insertUser" parameterType="User">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_users.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO users (
			id,
			email,
			password,
			nickname,
			agree,
			created_at,
			updated_at
		) VALUES (
			#{id},
			#{email},
			#{password},
			#{nickname},
			#{agree},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<insert id="insertAuth" parameterType="Auth">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_auth.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO auth (
			id,
			user_id,
			role,
			created_at
		) VALUES (
			#{id},
			#{userId},
			#{role},
			SYSDATE
		)
	</insert>

	<insert id="insertSnsInfo" parameterType="SnsInfo">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_snsinfo.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO sns_info (
			id,
			user_id,
			sns_id,
			provider,
			connected_at,
			created_at
		) VALUES (
			#{id},
			#{userId},
			#{snsId},
			#{provider},
			#{connectedAt},
			SYSDATE
		)
	</insert>
	
	<select id="isNicknameExist" parameterType="string" resultType="boolean">
		SELECT
			COUNT(*)
		FROM
			users
		WHERE
			nickname = #{nickname}
	</select>
	
	<resultMap id="accountMap" type="map">
		<!-- java.lang.ClassCastException: class java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<result property="id" column="id" javaType="long"/> 
		<result property="email" column="email"/>
		<result property="password" column="password"/>
		<result property="nickname" column="nickname"/>
		<result property="zipcode" column="zipcode"/>
		<result property="addr" column="addr"/>
		<result property="addrDetail" column="addr_detail"/>
		<result property="agree" column="agree" javaType="boolean"/>
		<result property="createdAt" column="created_at" javaType="java.time.LocalDateTime"/>
		<result property="updatedAt" column="updated_at" javaType="java.time.LocalDateTime"/>
		<result property="imagePath" column="image_path"/>
	</resultMap>
	
	<select id="findUserInfoById" parameterType="long" resultMap="accountMap">
		SELECT
			users.id,
			users.email,
			users.password,
			users.nickname,
			users.zipcode,
			users.addr,
			users.addr_detail,
			users.agree,
			users.created_at,
			users.updated_at,
			latest_image.path AS image_path
		FROM
			users
		LEFT OUTER JOIN (
			SELECT
				user_id, path
			FROM
				user_image
			WHERE 
				id IN ( SELECT MAX(id) FROM user_image GROUP BY user_id )
		) latest_image
		ON
			users.id = latest_image.user_id
		WHERE
			users.id = #{id}
	</select>
	
	<!-- <select id="findUserInfoById" parameterType="long" resultMap="userInfoMap">
		SELECT
			users.*,
			b.path AS image_path
		FROM
			users
		LEFT OUTER JOIN (
			SELECT
				user_id,
				path,
				ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY created_at DESC) AS rn
			FROM
				user_image
		) b
		ON
			users.id = b.user_id AND b.rn = 1
		WHERE
			users.id = #{id}
	</select> -->
	
	<resultMap id="userDetailsMap" type="map">
		<!-- java.lang.ClassCastException: class java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<result property="id" column="id" javaType="long"/> 
		<result property="email" column="email"/>
		<result property="password" column="password"/>
		<result property="nickname" column="nickname"/>
		<result property="imagePath" column="image_path"/>
		<result property="provider" column="provider"/>
		<collection property="roles" javaType="list" ofType="string">
			<result column="role"/>
		</collection>
	</resultMap>
	
	<select id="findUserDetailsByEmail" parameterType="string" resultMap="userDetailsMap">
		SELECT
			users.id,
			users.email,
			users.password,
			users.nickname,
			latest_image.path AS image_path,
			sns_info.provider,
			auth.role
		FROM
			users
		LEFT OUTER JOIN (
			SELECT
				user_id, path
			FROM
				user_image
			WHERE 
				id IN ( SELECT MAX(id) FROM user_image GROUP BY user_id )
		) latest_image
		ON
			users.id = latest_image.user_id
		LEFT OUTER JOIN
			sns_info
		ON
			users.id = sns_info.user_id
		INNER JOIN
			auth
		ON
			users.id = auth.user_id
		WHERE
			users.email = #{email}
	</select>
	
	<select id="findUserDetailsById" parameterType="long" resultMap="userDetailsMap">
		SELECT
			users.id,
			users.email,
			users.password,
			users.nickname,
			latest_image.path AS image_path,
			sns_info.provider,
			auth.role
		FROM
			users
		LEFT OUTER JOIN (
			SELECT
				user_id, path
			FROM
				user_image
			WHERE 
				id IN ( SELECT MAX(id) FROM user_image GROUP BY user_id )
		) latest_image
		ON
			users.id = latest_image.user_id
		LEFT OUTER JOIN
			sns_info
		ON
			users.id = sns_info.user_id
		INNER JOIN
			auth
		ON
			users.id = auth.user_id
		WHERE
			users.id = #{id}
	</select>
	
	<select id="findUserByEmail" parameterType="string" resultType="User">
		SELECT
			*
		FROM
			users
		WHERE	
			email = #{email}
	</select>
	
	<select id="findUserById" parameterType="long" resultType="User">
		SELECT
			*
		FROM
			users
		WHERE
			id = #{id}
	</select>
	
	<update id="updateNickname" parameterType="User">
		UPDATE 
			users
		SET
			nickname = #{nickname},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<update id="updateEmail" parameterType="User">
		UPDATE 
			users
		SET
			email = #{email},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<update id="updateAddr" parameterType="User">
		UPDATE 
			users
		SET
			zipcode = #{zipcode},
			addr = #{addr},
			addr_detail = #{addrDetail},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>

	<update id="updateAgree" parameterType="User">
		UPDATE 
			users
		SET
			agree = #{agree},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<update id="updatePassword" parameterType="User">
		UPDATE 
			users
		SET
			password = #{password},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
</mapper>