<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.MemberMapper">

	<insert id="insertMember" parameterType="member">
		<selectKey keyProperty="memberIdx" resultType="int" order="BEFORE">
			SELECT seq_member.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO member (
			member_idx,
			member_email,
			member_password,
			member_nickname,
			member_agree,
			created_at,
			updated_at
		) VALUES (
			#{memberIdx},
			#{memberEmail},
			#{memberPassword},
			#{memberNickname},
			#{memberAgree},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<insert id="insertAuth" parameterType="auth">
		<selectKey keyProperty="authIdx" resultType="int" order="BEFORE">
			SELECT seq_auth.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO auth (
			auth_idx,
			member_idx,
			member_role
		) VALUES (
			#{authIdx},
			#{memberIdx},
			#{memberRole}
		)
	</insert>

	<insert id="insertSnsInfo" parameterType="snsInfo">
		<selectKey keyProperty="snsIdx" resultType="int" order="BEFORE">
			SELECT seq_sns_info.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO sns_info (
			sns_idx,
			member_idx,
			sns_provider,
			created_at
		) VALUES (
			#{snsIdx},
			#{memberIdx},
			#{snsProvider},
			SYSDATE
		)
	</insert>
	
	<select id="isNicknameExist" parameterType="string" resultType="boolean">
		SELECT
			COUNT(*)
		FROM
			member
		WHERE
			member_nickname = #{memberNickname}
	</select>
	
	<resultMap id="memberInfoMap" type="map">
		<!-- java.lang.ClassCastException: class java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<result property="memberIdx" column="member_idx" javaType="int"/> 
		<result property="memberEmail" column="member_email"/>
		<result property="memberPassword" column="member_password"/>
		<result property="memberNickname" column="member_nickname"/>
		<result property="memberZipcode" column="member_zipcode"/>
		<result property="memberAddr" column="member_addr"/>
		<result property="memberAddrDetail" column="member_addr_detail"/>
		<result property="memberAgree" column="member_agree" javaType="boolean"/>
		<result property="createdAt" column="created_at"/>
		<result property="updatedAt" column="updated_at"/>
		<result property="memberImageUrl" column="member_image_url"/>
	</resultMap>
	
	<select id="findMemberInfoByIdx" parameterType="int" resultMap="memberInfoMap">
		SELECT
			a.*,
			b.member_image_url
		FROM
			member a
		LEFT OUTER JOIN (
			SELECT
				member_idx,
				member_image_url,
				ROW_NUMBER() OVER (PARTITION BY member_idx ORDER BY created_at DESC) AS rn
			FROM
				member_image
		) b
		ON
			a.member_idx = b.member_idx AND b.rn = 1
		WHERE
			a.member_idx = #{memberIdx}
	</select>
	
	<resultMap id="userDetailsMap" type="map">
		<!-- java.lang.ClassCastException: class java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<result property="memberIdx" column="member_idx" javaType="int"/> 
		<result property="memberEmail" column="member_email"/>
		<result property="memberPassword" column="member_password"/>
		<result property="memberNickname" column="member_nickname"/>
		<result property="memberImageUrl" column="member_image_url"/>
		<result property="snsProvider" column="sns_provider"/>
		<collection property="memberRoles" javaType="list" ofType="string">
			<result column="member_role"/>
		</collection>
	</resultMap>
	
	<select id="findUserDetailsByEmail" parameterType="string" resultMap="userDetailsMap">
		SELECT
			a.member_idx,
			a.member_email,
			a.member_password,
			a.member_nickname,
			b.member_image_url,
			c.sns_provider,
			d.member_role
		FROM
			member a
		LEFT OUTER JOIN (
			SELECT
				member_idx,
				member_image_url,
				ROW_NUMBER() OVER (PARTITION BY member_idx ORDER BY created_at DESC) AS rn
			FROM
				member_image
		) b
		ON
			a.member_idx = b.member_idx AND b.rn = 1 
		LEFT OUTER JOIN
			sns_info c
		ON
			a.member_idx = c.member_idx
		INNER JOIN
			auth d
		ON
			a.member_idx = d.member_idx
		WHERE
			a.member_email = #{memberEmail}
	</select>

	<select id="findUserDetailsByIdx" parameterType="int" resultMap="userDetailsMap">
		SELECT
			a.member_idx,
			a.member_email,
			a.member_password,
			a.member_nickname,
			b.member_image_url,
			c.sns_provider,
			d.member_role
		FROM
			member a
		LEFT OUTER JOIN (
			SELECT
				member_idx,
				member_image_url,
				ROW_NUMBER() OVER (PARTITION BY member_idx ORDER BY created_at DESC) AS rn
			FROM
				member_image
		) b
		ON
			a.member_idx = b.member_idx AND b.rn = 1 
		LEFT OUTER JOIN
			sns_info c
		ON
			a.member_idx = c.member_idx
		INNER JOIN
			auth d
		ON
			a.member_idx = d.member_idx
		WHERE
			a.member_idx = #{memberIdx}
	</select>
	
	<select id="findMemberByEmail" parameterType="string" resultType="member">
		SELECT
			*
		FROM
			member
		WHERE	
			member_email = #{memberEmail}
	</select>
	
	<select id="findMemberByIdx" parameterType="int" resultType="member">
		SELECT
			*
		FROM
			member
		WHERE
			member_idx = #{memberIdx}
	</select>
	
	<update id="updateNickname" parameterType="member">
		UPDATE 
			member
		SET
			member_nickname = #{memberNickname},
			updated_at = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="updateEmail" parameterType="member">
		UPDATE 
			member
		SET
			member_email = #{memberEmail},
			updated_at = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="updateAddr" parameterType="member">
		UPDATE 
			member
		SET
			member_zipcode = #{memberZipcode},
			member_addr = #{memberAddr},
			member_addr_detail = #{memberAddrDetail},
			updated_at = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>

	<update id="updateAgree" parameterType="member">
		UPDATE 
			member
		SET
			member_agree = #{memberAgree},
			updated_at = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<update id="updatePassword" parameterType="member">
		UPDATE 
			member
		SET
			member_password = #{memberPassword},
			updated_at = SYSDATE
		WHERE
			member_idx = #{memberIdx}
	</update>
	
	<select id="findMemeberByIdAndEmail" parameterType="map" resultType="member">
		SELECT
			*
		FROM
			member
		WHERE
			member_id = #{memberId}
		AND
			member_email = #{memberEmail}
	</select>
	
</mapper>