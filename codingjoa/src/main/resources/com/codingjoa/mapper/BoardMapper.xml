<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.BoardMapper">
<!--
## board  
    id                  NUMBER,
    user_id             NUMBER                      NOT NULL,
    category_code       NUMBER                      NOT NULL,
	title               VARCHAR2(500)               NOT NULL,
    content             CLOB                        NOT NULL,
    search_content      CLOB                        NULL,  
    view_count          NUMBER          DEFAULT 0   NOT NULL,   
    comment_count       NUMBER          DEFAULT 0   NOT NULL, 
    like_count          NUMBER          DEFAULT 0   NOT NULL,
	created_at          DATE                        NOT NULL,
    updated_at          DATE                        NOT NULL,
-->

	<insert id="insertBoard" parameterType="Board">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_board.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO board (
			id,
			user_id,
			category_code,
			title,
			content,
			search_content,
			created_at,
			updated_at
		) VALUES (
			#{id},
			#{userId},
			#{categoryCode},
			#{title},
			#{content},
			#{searchContent},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="boardDetailsMap">
		<id property="id" column="id" javaType="long"/>
		<result column="title" property="title" javaType="string"/>
		<result column="category_code" property="categoryCode" javaType="int"/>
		<!-- <result column="content" property="content" typeHandler="clobTypeHandler"/> -->
		<result column="content" property="content" javaType="string" jdbcType="CLOB" />
		<result column="view_count" property="viewCount" javaType="int"/>
		<result column="comment_count" property="commentCount" javaType="int"/>
		<result column="like_count" property="likeCount" javaType="int"/>
		<result column="created_at" property="createdAt" javaType="java.time.LocalDateTime"/>
		<result column="updated_at" property="updatedAt" javaType="java.time.LocalDateTime"/>
		<result column="writer_nickname" property="writerNickname" javaType="string"/>
		<result column="is_writer" property="isWriter" javaType="boolean"/>
		<result column="is_liked" property="isLiked" javaType="boolean"/>
	</resultMap>
	
	<select id="findBoardDetailsById" parameterType="map" resultMap="boardDetailsMap">
		SELECT 
			board.id,
			board.user_id,
			board.category_code,
			board.title,
			board.content,
			board.view_count,
			board.comment_count,
			board.like_count,
			users.nickname AS writer_nickname,
			CASE
				WHEN board.user_id = #{userId} THEN 1 
				ELSE 0
			END AS is_writer,
			CASE
				WHEN EXISTS ( 
   					 SELECT 1 
   					FROM board_like
    				WHERE board_like.board_id = board.id 
    				AND board_like.user_id = #{userId} 
    			) THEN1
    			ELSE 0 
    		EBD AS is_liked
		FROM
			board
		INNER JOIN
			users
		ON
			board.user_id = users.id
		WHERE
			board.id = #{boardId} 
	</select>

	<update id="increaseViewCount" parameterType="long">
		UPDATE
			board
		SET
			view_count = view_count + 1
		WHERE
			id = #{id}
	</update>

	<sql id="searchCriteria">
		<if test='boardCri.keyword != ""'>
			<trim prefix="(" suffix=") AND " suffixOverrides="OR">
				<foreach collection='boardCri.type.split("_")' item="item">
					<trim suffix="OR">
						<if test='item.equals("title")'>
							REGEXP_LIKE( board.title, #{boardCri.keywordRegexp} )
						</if>
						<if test='item.equals("content")'>
							REGEXP_LIKE( board.search_content, #{boardCri.keywordRegexp} )
						</if>
						<if test='item.equals("writer")'>
							<!-- member.member_nickname LIKE '%' || #{boardCri.keyword} || '%' -->
							REGEXP_LIKE( users.nickname, #{boardCri.keywordRegexp} )
						</if> 
					</trim>
				</foreach>
			</trim>
		</if>
	</sql> 

	<select id="findPagedBoards" parameterType="map" resultMap="boardDetailsMap">
		SELECT
			/*+ ORDERED */
			final_board.id,
			final_board.category_code,
			final_board.title,
			final_board.content,
			final_board.view_count,
			final_board.comment_count,
			final_board.like_count,
			final_board.nickname AS writer_nickname,
			CASE
				WHEN board.user_id = #{userId} THEN 1 
				ELSE 0
			END AS is_writer,
			CASE
				WHEN EXISTS ( 
   					 SELECT 1 
   					FROM board_like
    				WHERE board_like.board_id = board.id 
    				AND board_like.user_id = #{userId} 
    			) THEN1
    			ELSE 0 
    		EBD AS is_liked
		FROM (
			SELECT
				paged_board.*
			FROM (
			    SELECT
			    	ROWNUM rn,
			    	searched_board.*
			    FROM (
					SELECT
						/*+ INDEX_DESC(board pk_board) */
			        	board.*,
			        	users.nickname
			    	FROM 
			        	board
			        INNER JOIN
			        	users
			        ON
			        	board.user_id = users.id
			    	WHERE
			        	<include refid="searchCriteria"/>
						board.category_code = #{categoryCode}
					ORDER BY
						board.id DESC						
			    ) searched_board
			    WHERE
			    	<![CDATA[ ROWNUM <= ( #{boardCri.page} * #{boardCri.recordCnt} ) ]]>
			) paged_board
		    WHERE 
		    	paged_board.rn > ( (#{boardCri.page} - 1) * #{boardCri.recordCnt} )
		) final_board
	</select>

	<select id="findPagedBoardTotalCnt" parameterType="map" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		INNER JOIN
			users
		ON
			board.user_id = users.id
		WHERE
			<include refid="searchCriteria"/>
			board.category_code = #{categoryCode}
	</select>

	<select id="findBoardById" parameterType="long" resultType="Board">
		SELECT
			*
		FROM 
			board
		WHERE
			id = #{id}
	</select>
	
	<update id="updateBoard" parameterType="Board">
		UPDATE
			board
		SET
			title = #{title},
			content = #{content},
			search_content = #{searchContent},
			category_code = #{categoryCode},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<delete id="deleteBoard" parameterType="Board">
		DELETE FROM
			board
		WHERE
			id = #{id}
	</delete>
	
	<!-- <delete id="deleteBoard" parameterType="board" statementType="CALLABLE">
	{ 
		CALL
			DECLARE
				v_board_writer_idx board.board_writer_idx%TYPE := NULL;
				v_board_category_code board.board_category_code%TYPE := NULL;
			BEGIN
				DELETE FROM
					board
	    		WHERE 
	        		board_idx = #{boardIdx} 
	    		RETURNING 
	        		board_writer_idx, 
	        		board_category_code 
	    		INTO
	        		v_board_writer_idx, 
	        		v_board_category_code;
	        	#{boardWriterIdx, mode=OUT, jdbcType=NUMERIC, javaType=Integer} := v_board_writer_idx;
	        	#{boardCategoryCode, mode=OUT, jdbcType=NUMERIC, javaType=Integer} := v_board_category_code;
			END 
	}
	</delete> -->
	
</mapper>