<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.BoardMapper">
<!--
## board  
    id                  NUMBER,
    user_id             NUMBER                      NOT NULL,
    category_code       NUMBER                      NOT NULL,
	title               VARCHAR2(500)               NOT NULL,
    content             CLOB                        NOT NULL,
    search_content      CLOB                        NULL,  
    view_count          NUMBER          DEFAULT 0   NOT NULL,   
    comment_count       NUMBER          DEFAULT 0   NOT NULL, 
    like_count          NUMBER          DEFAULT 0   NOT NULL,
	created_at          DATE                        NOT NULL,
    updated_at          DATE                        NOT NULL,
-->

	<insert id="insertBoard" parameterType="Board">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_board.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO board (
			id,
			user_id,
			category_code,
			title,
			content,
			search_content,
			created_at,
			updated_at
		) VALUES (
			#{id},
			#{userId},
			#{categoryCode},
			#{title},
			#{content},
			#{searchContent},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="boardDetailsMap">
		<id property="id" column="id" javaType="long"/>
		<result column="category_code" property="categoryCode" javaType="int"/>
		<result column="title" property="title" javaType="string"/>
		<result column="content" property="content" javaType="string" jdbcType="CLOB" />
		<result column="view_count" property="viewCount" javaType="int"/>
		<result column="comment_count" property="commentCount" javaType="int"/>
		<result column="like_count" property="likeCount" javaType="int"/>
		<result column="created_at" property="createdAt" javaType="java.time.LocalDateTime"/>
		<result column="updated_at" property="updatedAt" javaType="java.time.LocalDateTime"/>
		<result column="writer_nickname" property="writerNickname" javaType="string"/>
		<result column="is_writer" property="isWriter" javaType="boolean"/>
		<result column="is_liked" property="isLiked" javaType="boolean"/>
	</resultMap>
	
	<select id="findBoardDetailsById" parameterType="map" resultMap="boardDetailsMap">
		SELECT 
			board.id,
			board.category_code,
			board.title,
			board.content,
			board.view_count,
			board.comment_count,
			board.like_count,
			board.created_at,
			board.updated_at,
			users.nickname AS writer_nickname,
			CASE
				WHEN board.user_id = #{userId} 
				THEN 1 ELSE 0
			END AS is_writer,
			CASE
				WHEN board_like.user_id IS NOT NULL 
				THEN 1 ELSE 0
    		END AS is_liked
		FROM
			board
		INNER JOIN
			users
		ON
			board.user_id = users.id
		LEFT OUTER JOIN
			board_like
		ON
			board.id = board_like.board_id AND board_like.user_id = #{userId} 
		WHERE
			board.id = #{boardId}
	</select>
	
	<!-- <select id="findBoardDetailsById" parameterType="map" resultMap="boardDetailsMap">
		SELECT 
			board.id,
			board.category_code,
			board.title,
			board.content,
			board.view_count,
			board.comment_count,
			board.like_count,
			board.created_at,
			board.updated_at,
			users.nickname AS writer_nickname,
			CASE
				WHEN board.user_id = #{userId} THEN 1 
				ELSE 0
			END AS is_writer,
			CASE
				WHEN EXISTS ( 
   					SELECT 1 
   					FROM board_like
    				WHERE board_like.board_id = board.id 
    				AND board_like.user_id = #{userId} 
    			) THEN 1
    			ELSE 0 
    		END AS is_liked
		FROM
			board
		INNER JOIN
			users
		ON
			board.user_id = users.id
		WHERE
			board.id = #{boardId}
	</select> -->

	<update id="increaseViewCount" parameterType="long">
		UPDATE
			board
		SET
			view_count = view_count + 1
		WHERE
			id = #{id}
	</update>

	<sql id="searchCriteria">
		<if test='boardCri.keyword != ""'>
			<trim prefix="(" suffix=") AND " suffixOverrides="OR">
				<foreach collection='boardCri.types' item="item">
					<trim suffix="OR">
						<if test='item.equals("title")'>
							REGEXP_LIKE(board.title, #{boardCri.keywordRegexp})
						</if>
						<if test='item.equals("content")'>
							REGEXP_LIKE(board.search_content, #{boardCri.keywordRegexp})
						</if>
						<if test='item.equals("writer")'>
							<!-- users.nickname LIKE '%' || #{boardCri.keyword} || '%' -->
							REGEXP_LIKE(users.nickname, #{boardCri.keywordRegexp})
						</if> 
					</trim>
				</foreach>
			</trim>
		</if>
	</sql> 

	<select id="findPagedBoards" parameterType="map" resultMap="boardDetailsMap">
		<choose>
			<!-- [1] writer 검색 포함: 먼저 users와 join -->
			<when test="boardCri.types.contains('writer')">
				SELECT
					final_board.id,
					final_board.category_code,
					final_board.title,
					final_board.content,
					final_board.view_count,
					final_board.comment_count,
					final_board.like_count,
					final_board.created_at,
					final_board.updated_at,
					final_board.nickname AS writer_nickname,
					CASE
						WHEN final_board.user_id = #{userId} 
						THEN 1 ELSE 0
					END AS is_writer,
					CASE
						WHEN board_like.user_id IS NOT NULL
						THEN 1 ELSE 0
					END AS is_liked
				FROM (
					SELECT paged_board.*
					FROM (
					    SELECT ROWNUM rn, filtered_board.*
					    FROM (
							SELECT /*+ INDEX_DESC(board pk_board) */ board.*, users.nickname
					    	FROM board
					        INNER JOIN users ON board.user_id = users.id
					    	WHERE <include refid="searchCriteria"/> board.category_code = #{categoryCode}
							ORDER BY board.id DESC
					    ) filtered_board
					    WHERE
					    	ROWNUM <![CDATA[ <= ]]> ( #{boardCri.page} * #{boardCri.recordCnt} )
					) paged_board
				    WHERE 
				    	paged_board.rn <![CDATA[ > ]]> ( (#{boardCri.page} - 1) * #{boardCri.recordCnt} )
				) final_board
				LEFT OUTER JOIN
					board_like
				ON
					final_board.id = board_like.board_id AND board_like.user_id = #{userId}
				ORDER BY 
					final_board.id DESC
			</when>
			
			<!-- [2] writer 검색 미포함: 나중에 users와 join  -->
			<otherwise>
				SELECT
					final_board.id,
					final_board.category_code,
					final_board.title,
					final_board.content,
					final_board.view_count,
					final_board.comment_count,
					final_board.like_count,
					final_board.created_at,
					final_board.updated_at,
					users.nickname AS writer_nickname,
					CASE
						WHEN final_board.user_id = #{userId} 
						THEN 1 ELSE 0
					END AS is_writer,
					CASE
						WHEN board_like.user_id IS NOT NULL
						THEN 1 ELSE 0
					END AS is_liked
				FROM (
					SELECT paged_board.*
					FROM (
					    SELECT ROWNUM rn, filtered_board.*
					    FROM (
							SELECT /*+ INDEX_DESC(board pk_board) */ *
					    	FROM board
					    	WHERE <include refid="searchCriteria"/> category_code = #{categoryCode}
							ORDER BY id DESC
					    ) filtered_board
					    WHERE
					    	ROWNUM <![CDATA[ <= ]]> ( #{boardCri.page} * #{boardCri.recordCnt} )
					) paged_board
				    WHERE 
				    	paged_board.rn <![CDATA[ > ]]> ( (#{boardCri.page} - 1) * #{boardCri.recordCnt} )
				) final_board
				INNER JOIN
					users
				ON
					final_board.user_id = users.id
				LEFT OUTER JOIN
					board_like
				ON
					final_board.id = board_like.board_id AND board_like.user_id = #{userId} 					
				ORDER BY 
					final_board.id DESC
			</otherwise>
		</choose>
	</select>
	
	<!-- <select id="findPagedBoards" parameterType="map" resultMap="boardDetailsMap">
		<choose>
			[1] writer 검색 포함: board + users 먼저 join
			<when test="boardCri.types.contains('writer')">
				SELECT
					final_board.id,
					final_board.category_code,
					final_board.title,
					final_board.content,
					final_board.view_count,
					final_board.comment_count,
					final_board.like_count,
					final_board.created_at,
					final_board.updated_at,
					final_board.nickname AS writer_nickname,
					CASE
						WHEN final_board.user_id = #{userId} 
						THEN 1 ELSE 0
					END AS is_writer,
					CASE
						WHEN EXISTS ( 
							SELECT 1 
							FROM board_like 
							WHERE board_like.board_id = final_board.id 
							AND board_like.user_id = #{userId} 
						) THEN 1 ELSE 0 
    				END AS is_liked
				FROM (
					SELECT paged_board.*
					FROM (
					    SELECT ROWNUM rn, filtered_board.*
					    FROM (
							SELECT /*+ INDEX_DESC(board pk_board) */ board.*, users.nickname
					    	FROM board
					        INNER JOIN users ON board.user_id = users.id
					    	WHERE <include refid="searchCriteria"/> board.category_code = #{categoryCode}
							ORDER BY board.id DESC
					    ) filtered_board
					    WHERE
					    	ROWNUM <![CDATA[ <= ]]> ( #{boardCri.page} * #{boardCri.recordCnt} )
					) paged_board
				    WHERE 
				    	paged_board.rn <![CDATA[ > ]]> ( (#{boardCri.page} - 1) * #{boardCri.recordCnt} )
				) final_board
			</when>
			
			[2] writer 검색 미포함: board만 먼저 -> 나중에 users join 
			<otherwise>
				SELECT
					final_board.id,
					final_board.category_code,
					final_board.title,
					final_board.content,
					final_board.view_count,
					final_board.comment_count,
					final_board.like_count,
					final_board.created_at,
					final_board.updated_at,
					users.nickname AS writer_nickname,
					CASE
						WHEN final_board.user_id = #{userId} 
						THEN 1 ELSE 0
					END AS is_writer,
					CASE
						WHEN EXISTS ( 
							SELECT 1 
							FROM board_like 
							WHERE board_like.board_id = final_board.id 
							AND board_like.user_id = #{userId} 
						) THEN 1 ELSE 0 
    				END AS is_liked
				FROM (
					SELECT paged_board.*
					FROM (
					    SELECT ROWNUM rn, filtered_board.*
					    FROM (
							SELECT /*+ INDEX_DESC(board pk_board) */ *
					    	FROM board
					    	WHERE <include refid="searchCriteria"/> category_code = #{categoryCode}
							ORDER BY id DESC
					    ) filtered_board
					    WHERE
					    	ROWNUM <![CDATA[ <= ]]> ( #{boardCri.page} * #{boardCri.recordCnt} )
					) paged_board
				    WHERE 
				    	paged_board.rn <![CDATA[ > ]]> ( (#{boardCri.page} - 1) * #{boardCri.recordCnt} )
				) final_board
				INNER JOIN
					users
				ON
					final_board.user_id = users.id
				ORDER BY 
					final_board.id DESC
			</otherwise>
		</choose>
	</select> -->

	<select id="findTotalCntForPaging" parameterType="map" resultType="int">
		<choose>
			<!-- [1] writer 검색 포함: board + users 먼저 join -->
			<when test="boardCri.types.contains('writer')">
				SELECT COUNT(*)
				FROM board
				INNER JOIN users ON board.user_id = users.id
				WHERE <include refid="searchCriteria"/> board.category_code = #{categoryCode}
			</when>
			
			<!-- [2] writer 검색 미포함: board만 먼저 -> 나중에 users join  -->
			<otherwise>
				SELECT COUNT(*)
				FROM board
				WHERE <include refid="searchCriteria"/> board.category_code = #{categoryCode}
			</otherwise>
		</choose>
	</select>
	
	<select id="findBoardById" parameterType="long" resultType="Board">
		SELECT
			*
		FROM 
			board
		WHERE
			id = #{id}
	</select>
	
	<update id="updateBoard" parameterType="Board">
		UPDATE
			board
		SET
			title = #{title},
			content = #{content},
			search_content = #{searchContent},
			category_code = #{categoryCode},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<delete id="deleteBoard" parameterType="Board">
		DELETE FROM
			board
		WHERE
			id = #{id}
	</delete>
	
	<update id="increaseCommentCount" parameterType="long">
		UPDATE
			board
		SET
			comment_count = comment_count + 1
		WHERE
			id = #{id}
	</update>
	
	<update id="decreaseCommentCount" parameterType="long">
		UPDATE
			board
		SET
			comment_count = comment_count - 1
		WHERE
			id = #{id}
	</update>
	
	<update id="increaseLikeCount" parameterType="long">
		UPDATE
			board
		SET
			like_count = like_count + 1
		WHERE
			id = #{id}
	</update>

	<update id="decreaseLikeCount" parameterType="long">
		UPDATE
			board
		SET
			like_count = like_count - 1
		WHERE
			id = #{id}
	</update>
	
</mapper>