<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.BoardMapper">
<!--  
    id                  NUMBER,
    user_id             NUMBER                      NOT NULL,
    category_code       NUMBER                      NOT NULL,
	title               VARCHAR2(500)               NOT NULL,
    content             CLOB                        NOT NULL,
    search_content      CLOB                        NULL,  
    view_count          NUMBER          DEFAULT 0   NOT NULL,   
    comment_count       NUMBER          DEFAULT 0   NOT NULL, 
    like_count          NUMBER          DEFAULT 0   NOT NULL,
	created_at          DATE                        NOT NULL,
    updated_at          DATE                        NOT NULL,
-->

	<insert id="insertBoard" parameterType="Board">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_board.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO board (
			id,
			user_id,
			category_code,
			title,
			content,
			search_content,
			created_at,
			updated_at
		) VALUES (
			#{id},
			#{userId},
			#{categoryCode},
			#{title},
			#{content},
			#{searchContent},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="boardDetailsMap">
		<id property="id" column="id" javaType="long"/>
		<result column="title" property="title" javaType="string"/>
		<result column="category_code" property="categoryCode" javaType="int"/>
		<!-- <result column="content" property="content" typeHandler="clobTypeHandler"/> -->
		<result column="content" property="content" javaType="string" jdbcType="CLOB" />
		<result column="view_count" property="viewCount" javaType="int"/>
		<result column="comment_count" property="commentCount" javaType="int"/>
		<result column="like_count" property="likeCount" javaType="int"/>
		<result column="created_at" property="createdAt" javaType="java.time.LocalDateTime"/>
		<result column="updated_at" property="updatedAt" javaType="java.time.LocalDateTime"/>
		<result column="nickname" property="writerNickname" javaType="string"/>
		<result column="is_writer" property="isWriter" javaType="boolean"/>
		<result column="is_liked" property="isLiked" javaType="boolean"/>
	</resultMap>
	
	<select id="findBoardDetailsByIdx" parameterType="map" resultMap="boardDetailsMap">
		SELECT 
			board.*,
			user.nickname, 
    		CASE
    			WHEN board.board_writer_idx = #{userId} 
    			THEN 1 ELSE 0
    		END AS is_writer,
    		CASE
    			WHEN EXISTS ( 
    				SELECT 
    					1 
    				FROM 
    					board_likes
    				WHERE 
    					board_likes.board_idx = board.board_idx 
    				AND 
    					board_likes.member_idx = #{memberIdx} 
    			) THEN 1 ELSE 0
    		END AS is_liked
		FROM
			board
		INNER JOIN
			member
		ON
			board.board_writer_idx = member.member_idx
		WHERE
			board.board_idx = #{boardIdx} 
	</select>

	<update id="updateBoardView" parameterType="int">
		UPDATE
			board
		SET
			board_view = board_view + 1
		WHERE
			board_idx = #{boardIdx}
	</update>

	<sql id="searchCriteria">
		<if test='boardCri.keyword != ""'>
			<trim prefix="(" suffix=") AND " suffixOverrides="OR">
				<foreach collection='boardCri.type.split("_")' item="item">
					<trim suffix="OR">
						<if test='item.equals("title")'>
							REGEXP_LIKE( board.board_title, #{boardCri.keywordRegexp} )
						</if>
						<if test='item.equals("content")'>
							REGEXP_LIKE( board.board_content_text, #{boardCri.keywordRegexp} )
						</if>
						<if test='item.equals("writer")'>
							<!-- member.member_nickname LIKE '%' || #{boardCri.keyword} || '%' -->
							REGEXP_LIKE( member.member_nickname, #{boardCri.keywordRegexp} )
						</if> 
					</trim>
				</foreach>
			</trim>
		</if>
	</sql> 

	<select id="findPagedBoard" parameterType="map" resultMap="boardDetailsMap">
		SELECT
			/*+ ORDERED USE_NL(comment_group) USE_NL(likes_group) */
			paged_board.*,
			CASE
				WHEN paged_board.board_writer_idx = #{memberIdx} 
				THEN 1 ELSE 0
			END AS is_writer,
			CASE
				WHEN EXISTS (
					SELECT 
						1
					FROM 
						board_likes
					WHERE 
						board_likes.board_idx = paged_board.board_idx 
					AND 
						board_likes.member_idx = #{memberIdx} 
    			) THEN 1 ELSE 0
    		END AS is_liked
		FROM (
		    SELECT 
		    	filtered_board.*
		    FROM (
				SELECT
					/*+ INDEX_DESC(board pk_board) */
		        	ROWNUM rn, 
		        	board.*
		        	member.member_nickname
		    	FROM 
		        	board
		        INNER JOIN
		        	member
		        ON
		        	board.board_writer_idx = member.member_idx
		    	WHERE
		        	<include refid="searchCriteria"/>
					board.board_category_code = #{boardCategoryCode}
				<!-- ORDER BY -->
				AND
					<![CDATA[ ROWNUM <= ( #{boardCri.page} * #{boardCri.recordCnt} ) ]]>
		    ) filtered_board
		    WHERE 
		    	filtered_board.rn > ( (#{boardCri.page} - 1) * #{boardCri.recordCnt} )
		) paged_board
		ON 
			paged_board.board_idx = likes_group.board_idx
	</select>

	<select id="findPagedBoardTotalCnt" parameterType="map" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		INNER JOIN
			member
		ON
			board.board_writer_idx = member.member_idx
		WHERE
			<include refid="searchCriteria"/>
			board.board_category_code = #{boardCategoryCode}
	</select>

	<select id="findBoardByIdx" parameterType="int" resultType="board">
		SELECT
			*
		FROM 
			board
		WHERE
			board_idx = #{boardIdx}
	</select>
	
	<update id="updateBoard" parameterType="board">
		UPDATE
			board
		SET
			board_title = #{boardTitle},
			board_content = #{boardContent},
			board_content_text = #{boardContentText},
			board_category_code = #{boardCategoryCode},
			updated_at = SYSDATE
		WHERE
			board_idx = #{boardIdx}
	</update>
	
	<select id="findBoardCategoryCode" parameterType="int" resultType="int">
		SELECT
			board_category_code
		FROM
			board
		WHERE
			board_idx = #{boardIdx} 
	</select>
	
	<delete id="deleteBoard" parameterType="board">
		DELETE FROM
			board
		WHERE
			board_idx = #{boardIdx}
	</delete>
	
	<!-- <delete id="deleteBoard" parameterType="board" statementType="CALLABLE">
	{ 
		CALL
			DECLARE
				v_board_writer_idx board.board_writer_idx%TYPE := NULL;
				v_board_category_code board.board_category_code%TYPE := NULL;
			BEGIN
				DELETE FROM
					board
	    		WHERE 
	        		board_idx = #{boardIdx} 
	    		RETURNING 
	        		board_writer_idx, 
	        		board_category_code 
	    		INTO
	        		v_board_writer_idx, 
	        		v_board_category_code;
	        	#{boardWriterIdx, mode=OUT, jdbcType=NUMERIC, javaType=Integer} := v_board_writer_idx;
	        	#{boardCategoryCode, mode=OUT, jdbcType=NUMERIC, javaType=Integer} := v_board_category_code;
			END 
	}
	</delete> -->
	
</mapper>