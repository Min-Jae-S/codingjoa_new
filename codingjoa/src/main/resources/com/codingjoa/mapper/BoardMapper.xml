<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.BoardMapper">
<!--  
	board_idx               NUMBER,
    member_idx              NUMBER                      NOT NULL,
	board_title             VARCHAR2(500)               NOT NULL,
    board_content           CLOB                        NOT NULL,
    board_content_text      CLOB                        NULL,
	board_category_code     NUMBER                      NOT NULL,
    board_views             NUMBER          DEFAULT 0   NOT NULL,
	created_at              DATE                        NOT NULL,
    updated_at              DATE                        NOT NULL,
-->

	<insert id="insertBoard" parameterType="board">
		<selectKey keyProperty="boardIdx" resultType="int" order="BEFORE">
			SELECT seq_board.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO board (
			board_idx,
			member_idx,
			board_title,
			board_content,
			board_content_text,
			board_category_code,
			created_at,
			updated_at
		) VALUES (
			#{boardIdx},
			#{memberIdx},
			#{boardTitle},
			#{boardContent},
			#{boardContentText},
			#{boardCategoryCode},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="boardDetailsMap">
		<id property="boardIdx" column="board_idx" javaType="int"/>
		<result property="boardTitle" column="board_title" javaType="string"/>
		<!-- <result property="boardContent" column="board_content" typeHandler="clobTypeHandler"/> -->
		<result property="boardContent" column="board_content" jdbcType="CLOB" javaType="string"/>
		<result property="boardViews" column="board_views" javaType="int"/>
		<result property="boardCategoryCode" column="board_category_code" javaType="int"/>
		<result property="createdAt" column="created_at" javaType="java.time.LocalDateTime"/>
		<result property="updatedAt" column="updated_at" javaType="java.time.LocalDateTime"/>
		<result property="isBoardWriter" column="is_board_writer" javaType="boolean"/>
		<result property="memberNickname" column="member_nickname" javaType="string"/>
		<result property="commentCnt" column="comment_cnt" javaType="int"/>
		<result property="boardLikesCnt" column="board_likes_cnt" javaType="int"/>
		<result property="isBoardLiked" column="is_board_liked" javaType="boolean"/>
	</resultMap>
	
	<select id="findBoardDetails" parameterType="map" resultMap="boardDetailsMap">
		SELECT 
			a.board_idx, 
			a.board_title, 
			a.board_content, 
			a.board_views, 
			a.board_category_code, 
			a.created_at, 
			a.updated_at,
			CASE
				WHEN a.member_idx = #{memberIdx} THEN 1
				ELSE 0
			END AS is_board_writer,
			b.member_nickname,
			NVL(c.cnt, 0) AS comment_cnt,
    		NVL(d.cnt, 0) AS board_likes_cnt,
    		CASE 
    			WHEN e.board_idx IS NOT NULL THEN 1 
    			ELSE 0 
    		END AS is_board_liked
		FROM
			board a
		INNER JOIN
			member b
		ON
			a.member_idx = b.member_idx
		LEFT OUTER JOIN (
			SELECT 
				board_idx, 
				COUNT(*) cnt
			FROM
				"comment"
			GROUP BY 
				board_idx
		) c
		ON 
			a.board_idx = c.board_idx
		LEFT OUTER JOIN ( 
			SELECT 
    			board_idx, 
    			COUNT(*) cnt
    		FROM 
    			board_likes
    		GROUP BY 
    			board_idx 
    	) d
		ON 
			a.board_idx = d.board_idx
		LEFT OUTER JOIN ( 
			SELECT 
    			board_idx
    		FROM 
    			board_likes
    		WHERE
    			member_idx = #{memberIdx}
    	) e
		ON 
			a.board_idx = e.board_idx
		WHERE
			a.board_idx = #{boardIdx} 
	</select>

	<update id="updateBoardViews" parameterType="int">
		UPDATE
			board
		SET
			board_views = board_views + 1
		WHERE
			board_idx = #{boardIdx}
	</update>
	
	<!-- <select id="findMemberIdxByKeyword" parameterType="string" resultType="int">
		SELECT
			member_idx
		FROM
			member
		WHERE
			member_id LIKE '%' || #{keyword} || '%'
	</select> -->
	
	<!-- <sql id="searchCriteria">
		<if test='boardCri.type != null and boardCri.keyword != null and boardCri.keyword != ""'>
			<trim prefix="(" suffix=") AND " suffixOverrides="OR">
				<foreach collection='boardCri.type.split("_")' item="item">
					<trim suffix="OR">
						<if test='item.equals("title")'>
							REGEXP_LIKE(board_title, #{boardCri.keywordRegexp})
						</if>
						<if test='item.equals("content")'>
							REGEXP_LIKE(board_content_text, #{boardCri.keywordRegexp})
						</if>
						<if test='item.equals("writer")'>
							board_writer_idx IN
							<foreach collection='boardCri.keyword.split("_")' item="item" separator="," open="(" close=")">
								#{item}
							</foreach>
						</if> 
					</trim>
				</foreach>
			</trim>
		</if>
	</sql> -->

	<sql id="searchCriteria">
		<!-- for cases where criteria are resolved without using the BoardCriteriaArgumentResolver -->
		<!-- 1) boardCri.type = null ==> new Criteria(1,5) -->
		<!-- 2) boardCri.boardCri.keywordRegexp = null ==> boardCri.keyword = null and boardCri.keyword = '' -->
		<if test='boardCri.type != null and boardCri.keywordRegexp != null'>
			<trim prefix="(" suffix=") AND " suffixOverrides="OR">
				<foreach collection='boardCri.type.split("_")' item="item">
					<trim suffix="OR">
						<if test='item.equals("title")'>
							REGEXP_LIKE( board.board_title, #{boardCri.keywordRegexp} )
						</if>
						<if test='item.equals("content")'>
							REGEXP_LIKE( board.board_content_text, #{boardCri.keywordRegexp} )
						</if>
						<if test='item.equals("writer")'>
							member.member_nickname LIKE '%' || #{boardCri.keyword} || '%'
						</if> 
					</trim>
				</foreach>
			</trim>
		</if>
	</sql> 

	<select id="findPagedBoard" parameterType="map" resultMap="boardDetailsMap">
		SELECT
			/*+ ORDERED USE_NL(b) USE_NL(c) USE_NL(d) */
			a.board_idx,
			a.board_title,
			a.board_views,
			a.board_category_code,
			a.created_at,
			a.updated_at,
			a.is_board_writer,
			a.member_nickname,
    		NVL(b.cnt, 0) AS comment_cnt,
    		NVL(c.cnt, 0) AS board_likes_cnt,
    		CASE 
    			WHEN d.board_idx IS NOT NULL THEN 1 
    			ELSE 0 
    		END AS is_board_liked
		FROM (
		    SELECT
		    	a_depth.board_idx,
	        	a_depth.board_title, 
	        	a_depth.board_views,
	        	a_depth.board_category_code, 
	        	a_depth.created_at,
	        	a_depth.updated_at,
	        	a_depth.is_board_writer,
	        	a_depth.member_nickname
		    FROM (
				SELECT
					/*+ INDEX_DESC(board pk_board) */
		        	ROWNUM rn, 
		        	board.board_idx, 
		        	board.board_title, 
		        	board.board_views,
		        	board.board_category_code, 
		        	board.created_at,
		        	board.updated_at,
		        	CASE
						WHEN board.member_idx = #{memberIdx} THEN 1
						ELSE 0
					END AS is_board_writer,
		        	member.member_nickname
		    	FROM 
		        	board
		        INNER JOIN
		        	member
		        ON
		        	board.member_idx = member.member_idx
		    	WHERE
		    		<!-- searchCriteria -->
		        	<include refid="searchCriteria"/>
					board.board_category_code = #{boardCategoryCode} 
				AND
					<![CDATA[
					ROWNUM <= ( #{boardCri.page} * #{boardCri.recordCnt} )
					]]>
		    ) a_depth
		    WHERE 
		    	a_depth.rn > ( ( #{boardCri.page} - 1 ) * #{boardCri.recordCnt} )
		) a
		LEFT OUTER JOIN (
			SELECT 
				board_idx, 
				COUNT(*) cnt
			FROM
				"comment"
			GROUP BY 
				board_idx
		) b
		ON 
			a.board_idx = b.board_idx
		LEFT OUTER JOIN ( 
			SELECT 
    			board_idx, 
    			COUNT(*) cnt
    		FROM 
    			board_likes
    		GROUP BY 
    			board_idx 
    	) c
		ON 
			a.board_idx = c.board_idx
		LEFT OUTER JOIN ( 
			SELECT 
    			board_idx
    		FROM 
    			board_likes
    		WHERE
    			member_idx = #{memberIdx} 
    	) d
		ON 
			a.board_idx = d.board_idx
	</select>

	<!-- <select id="findPagedBoard" parameterType="map" resultMap="boardDetailsMap">
		SELECT
			/*+ ORDERED USE_NL(b) USE_NL(c) USE_NL(d) */
			a.*,
			b.member_id,
    		NVL(c.cnt, 0) AS comment_cnt,
    		NVL(d.cnt, 0) AS board_likes_cnt
		FROM (
		    SELECT
		    	a_depth.board_idx, 
	        	a_depth.board_title, 
	        	a_depth.board_writer_idx, 
	        	a_depth.board_views,
	        	a_depth.board_category_code, 
	        	a_depth.regdate,
	        	a_depth.moddate
		    FROM (
				SELECT
					/*+ INDEX_DESC(board pk_board) */
		        	ROWNUM rn, 
		        	board_idx, 
		        	board_title, 
		        	board_writer_idx, 
		        	board_views,
		        	board_category_code, 
		        	regdate,
		        	moddate
		    	FROM 
		        	board
		    	WHERE
		        	<include refid="searchCriteria"/>
					board_category_code = #{boardCategoryCode} 
				AND
					<![CDATA[
					ROWNUM <= ( #{boardCri.page} * #{boardCri.recordCnt} )
					]]>
		    ) a_depth
		    WHERE 
		    	a_depth.rn > ( ( #{boardCri.page} - 1 ) * #{boardCri.recordCnt} )
		) a
		INNER JOIN
			member b
		ON 
			a.board_writer_idx = b.member_idx
		LEFT OUTER JOIN (
			SELECT 
				comment_board_idx, 
				COUNT(*) cnt
			FROM
				"comment"
			GROUP BY 
				comment_board_idx
		) c
		ON 
			a.board_idx = c.comment_board_idx
		LEFT OUTER JOIN ( 
			SELECT 
    			board_idx, 
    			COUNT(*) cnt
    		FROM 
    			board_likes
    		GROUP BY 
    			board_idx 
    	) d
		ON 
			a.board_idx = d.board_idx
	</select> -->

	<select id="findPagedBoardTotalCnt" parameterType="map" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		INNER JOIN
			member
		ON
			board.member_idx = member.member_idx
		WHERE
			<include refid="searchCriteria"/>
			board.board_category_code = #{boardCategoryCode}
	</select>

	<!-- <select id="findPagedBoardTotalCnt" parameterType="map" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		WHERE
			<include refid="searchCriteria"/>
			board_category_code = #{boardCategoryCode}
	</select> -->

	<select id="isBoardIdxExist" parameterType="map" resultType="boolean">
		SELECT
			COUNT(*)
		FROM
			board
		WHERE
			board_idx = #{boardIdx} 
		AND 
			board_category_code = #{boardCategoryCode}
	</select>
	
	<select id="findBoardByIdx" parameterType="int" resultType="board">
		SELECT
			*
		FROM 
			board
		WHERE
			board_idx = #{boardIdx}
	</select>
	
	<update id="updateBoard" parameterType="board">
		UPDATE
			board
		SET
			board_title = #{boardTitle},
			board_content = #{boardContent},
			board_content_text = #{boardContentText},
			board_category_code = #{boardCategoryCode},
			updated_at = SYSDATE
		WHERE
			board_idx = #{boardIdx}
	</update>
	
	<!-- <update id="updateBoard" parameterType="board">
		<selectKey keyProperty="boardWriterIdx" resultType="int" order="BEFORE">
			//nested exception is org.apache.ibatis.executor.ExecutorException: SelectKey returned no data.
			//SELECT board_writer_idx FROM board WHERE board_idx = #{boardIdx}
			SELECT 
				MAX(board_writer_idx) 
			FROM 
				board 
			WHERE 
				board_idx = #{boardIdx}
		</selectKey>
		UPDATE
			board
		SET
			board_title = #{boardTitle},
			board_content = #{boardContent},
			board_content_text = #{boardContentText},
			board_category_code = #{boardCategoryCode},
			moddate = SYSDATE
		WHERE
			//need to fix in case of #{boardIdx} is NULL?
			//always #{boardIdx} is 0?
			board_idx = #{boardIdx}
	</update> -->
	
	<select id="findBoardCategoryCode" parameterType="int" resultType="int">
		SELECT
			board_category_code
		FROM
			board
		WHERE
			board_idx = #{boardIdx} 
	</select>
	
	<delete id="deleteBoard" parameterType="board">
		DELETE FROM
			board
		WHERE
			board_idx = #{boardIdx}
	</delete>
	
	<!-- <delete id="deleteBoard" parameterType="board" statementType="CALLABLE">
	{ 
		CALL
			DECLARE
				v_board_writer_idx board.board_writer_idx%TYPE := NULL;
				v_board_category_code board.board_category_code%TYPE := NULL;
			BEGIN
				DELETE FROM
					board
	    		WHERE 
	        		board_idx = #{boardIdx} 
	    		RETURNING 
	        		board_writer_idx, 
	        		board_category_code 
	    		INTO
	        		v_board_writer_idx, 
	        		v_board_category_code;
	        	#{boardWriterIdx, mode=OUT, jdbcType=NUMERIC, javaType=Integer} := v_board_writer_idx;
	        	#{boardCategoryCode, mode=OUT, jdbcType=NUMERIC, javaType=Integer} := v_board_category_code;
			END 
	}
	</delete> -->
	
</mapper>