<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.BatchMapper">

	<insert id="insertBoardImageDummy">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_boardimage.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO board_image (
			id,
			board_id,
			name,
			path,
			created_at
		) VALUES (
			#{id},
			#{boardId},
			#{name},
			#{path},
			SYSDATE
		)
	</insert>

	<select id="findOrphanBoardImages" resultType="BoardImage">
		SELECT paged_images.*
		FROM (
			SELECT ROWNUM rn, filtered_images.*
			FROM (
				SELECT /*+ INDEX_DESC(board_image pk_boardimage) */ board_image.*
				FROM board_image
				WHERE 
					board_id IS NULL
				<if test="skippedId != null">
					AND id <![CDATA[ < ]]> #{skippedId} 
				</if>
				ORDER BY id DESC	
			) filtered_images
			WHERE
				ROWNUM <![CDATA[ <= ]]> ( (#{_page} + 1) * #{_pagesize} ) 
		) paged_images
		WHERE
			paged_images.rn > ( #{_page} * #{_pagesize} )
	</select>

	<delete id="deleteBoardImage">
		DELETE FROM board_image WHERE id = #{id}
	</delete>
	
	<update id="resetUserImageLatestFlag" parameterType="list">
		UPDATE 
			user_image 
		SET 
			latest = '0'
		WHERE
			user_id IN
		 	<foreach collection="list" item="userId" open="(" close=")" separator=",">	
				#{userId}
			</foreach>
	</update>
	
	<insert id="insertUserImageDummy" parameterType="UserImage">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_userimage.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO user_image (
			id,
			user_id,
			name,
			path,
			latest,
			created_at
		) VALUES (
			#{id},
			#{userId},
			#{name},
			#{path},
			#{latest},
			SYSDATE
		)
	</insert>

	<select id="findNotLatestUserImages" resultType="UserImage">
		SELECT paged_images.*
		FROM (
			SELECT ROWNUM rn, filtered_images.*
			FROM (
				SELECT /*+ INDEX_DESC(user_image pk_userimage) */ *
				FROM  user_image
				WHERE
					latest = '0'
				<if test="skippedId != null">
					AND id <![CDATA[ < ]]> #{skippedId} 
				</if>
				ORDER BY id DESC			
			) filtered_images
			WHERE
				ROWNUM <![CDATA[ <= ]]> ( (#{_page} + 1) * #{_pagesize} ) 
		) paged_images
		WHERE
			paged_images.rn > ( #{_page} * #{_pagesize} )
	</select>

	<delete id="deleteUserImage">
		DELETE FROM user_image WHERE id = #{id}
	</delete>
	
	<select id="findBoardCountColumn" resultType="BoardCountColumn">
		WITH
			final_board AS (
				SELECT 
					paged_board.id,
					paged_board.comment_count,
					paged_board.like_count
				FROM (
					SELECT
						ROWNUM rn,
						sorted_board.id,
						sorted_board.comment_count,
						sorted_board.like_count
					FROM (
						SELECT /*+ INDEX_DESC(board pk_board) */ id, comment_count, like_count
						FROM board
						ORDER BY id DESC
					) sorted_board
					WHERE
						ROWNUM <![CDATA[ <= ]]> ( (#{_page} + 1) * #{_pagesize} ) 
				) paged_board
				WHERE
					paged_board.rn <![CDATA[ > ]]> ( #{_page} * #{_pagesize} )
			),
			comment_group AS (
				SELECT board_id, COUNT(*) cnt
				FROM comments
				WHERE board_id IN (SELECT id FROM final_board) AND status = 1
				GROUP BY board_id
			),
			board_like_group AS (
				SELECT board_id, COUNT(*) cnt
				FROM board_like
				WHERE board_id IN (SELECT id FROM final_board)
				GROUP BY board_id
			)
			
		SELECT
			final_board.id 					AS board_id,
			final_board.comment_count,
			final_board.like_count,
			NVL(comment_group.cnt, 0) 		AS real_comment_count,
			NVL(board_like_group.cnt, 0) 	AS real_like_count
		FROM			
			final_board
		LEFT OUTER JOIN
			comment_group
		ON
			final_board.id = comment_group.board_id
		LEFT OUTER JOIN
			board_like_group
		ON	
			final_board.id = board_like_group.board_id
		ORDER BY
			final_board.id DESC
	</select>
	
	<update id="syncBoardCountColumn" parameterType="BoardCountColumn">
		UPDATE
			board
		SET
			comment_count = #{realCommentCount},
			like_count = #{realLikeCount}
		WHERE
			id = #{boardId}
	</update>

	<select id="findCommentCountColumn" resultType="CommentCountColumn">
		WITH
			final_comment AS (
				SELECT 
					paged_comment.id,
					paged_comment.like_count
				FROM (
					SELECT
						ROWNUM rn,
						sorted_comment.id,
						sorted_comment.like_count
					FROM (
						SELECT /*+ INDEX_DESC(comments pk_comments) */ id, like_count
						FROM comments
						ORDER BY id DESC
					) sorted_comment
					WHERE
						ROWNUM <![CDATA[ <= ]]> ( (#{_page} + 1) * #{_pagesize} ) 
				) paged_comment
				WHERE
					paged_comment.rn <![CDATA[ > ]]> ( #{_page} * #{_pagesize} )
			),
			comment_like_group AS (
				SELECT comment_id, COUNT(*) cnt
				FROM comment_like
				WHERE comment_id IN (SELECT id FROM final_comment)
				GROUP BY comment_id
			)
			
		SELECT
			final_comment.id 				AS comment_id,
			final_comment.like_count,
			NVL(comment_like_group.cnt, 0) 	AS real_like_count
		FROM			
			final_comment
		LEFT OUTER JOIN
			comment_like_group
		ON
			final_comment.id = comment_like_group.comment_id
		ORDER BY
			final_comment.id DESC
	</select>
	
	<update id="syncCommentCountColumn" parameterType="CommentCountColumn">
		UPDATE
			comments
		SET
			like_count = #{realLikeCount}
		WHERE
			id = #{commentId}
	</update>
	
	<select id="test" resultType="User">
		SELECT *
		FROM (
			SELECT ROWNUM rn, sorted_users.*
			FROM (
				SELECT /*+ INDEX_DESC(users pk_users) */*
				FROM users
				ORDER BY id DESC
			) sorted_users
			WHERE ROWNUM <![CDATA[ <= ]]> ( (#{_page} + 1) * #{_pagesize} ) 
		) 
		WHERE rn <![CDATA[ > ]]> ( #{_page} * #{_pagesize} ) <!-- rn <![CDATA[> #{_skiprows} -->
	</select>
	
</mapper>