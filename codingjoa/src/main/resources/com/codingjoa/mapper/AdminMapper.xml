<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.AdminMapper">
<!--
## users
    id                  NUMBER,
    email               VARCHAR2(100)   UNIQUE  NOT NULL,
    password            VARCHAR2(200)           NULL,
    nickname            VARCHAR2(50)    UNIQUE  NOT NULL,
    zipcode             CHAR(5)                 NULL,
    addr                VARCHAR2(150)           NULL,
    addr_detail         VARCHAR2(150)           NULL,
    agree               CHAR(1)                 NOT NULL,
    created_at          DATE                    NOT NULL,
    updated_at          DATE                    NOT NULL,
    
## auth
    id          NUMBER,
    user_id     NUMBER          NOT NULL,
    role        VARCHAR2(30)    NOT NULL,
    created_at  DATE            NOT NULL,
    
## sns_info
	id              NUMBER,
	user_id         NUMBER              NOT NULL,
    sns_id          VARCHAR2(200)       NOT NULL,
	provider        VARCHAR2(20)        NOT NULL,
	linked_at      	DATE                NOT NULL,
	
## board  
    id                  NUMBER,
    user_id             NUMBER                      NOT NULL,
    category_code       NUMBER                      NOT NULL,
	title               VARCHAR2(500)               NOT NULL,
    content             CLOB                        NOT NULL,
    search_content      CLOB                        NULL,  
    view_count          NUMBER          DEFAULT 0   NOT NULL,   
    comment_count       NUMBER          DEFAULT 0   NOT NULL, 
    like_count          NUMBER          DEFAULT 0   NOT NULL,
	created_at          DATE                        NOT NULL,
    updated_at          DATE                        NOT NULL,
-->

	<resultMap id="adminUserMap" type="AdminUser">
		<id column="id" property="user.id"/>
		<association property="user" javaType="User">
			<id column="id" property="id"/>
			<result column="email" property="email"/>
			<result column="password" property="password"/>
			<result column="nickname" property="nickname"/>
			<result column="zipcode" property="zipcode"/>
			<result column="addr" property="addr"/>
			<result column="addr_detail" property="addrDetail"/>
			<result column="agree" property="agree"/>
			<result column="created_at" property="createdAt"/>
			<result column="updated_at" property="updatedAt"/>
		</association>
		<association property="snsInfo" javaType="SnsInfo">
			<result column="provider" property="provider"/>
			<result column="linked_at" property="linkedAt"/>
		</association>
		<collection property="auths" ofType="Auth">
			<result column="role" property="role"/>
		</collection>
	</resultMap>
	
	<sql id="userSearchCriteria">
		<where>
			<if test='!keyword.empty'>
				<if test='type.equals("email")'>
					email LIKE '%' || #{keyword} || '%'
				</if>
				<if test='type.equals("nickname")'>
					nickname LIKE '%' || #{keyword} || '%'
				</if>
			</if>
		</where>
	</sql>
	
	<select id="findPagedUsers" resultMap="adminUserMap">
		SELECT
			final_users.*,
			sns_info.*,
			auth.*
		FROM (
			SELECT paged_users.*
			FROM (
				SELECT ROWNUM rn, filterd_users.*
				FROM (
					SELECT /*+ INDEX_DESC(users pk_users) */ *
					FROM users
					<include refid="userSearchCriteria"/>	
					ORDER BY id DESC
				) filterd_users
				WHERE
					ROWNUM <![CDATA[ <= ]]> ( #{page} * #{recordCnt} )
			) paged_users
			WHERE 
				paged_users.rn <![CDATA[ > ]]> ( (#{page} - 1) * #{recordCnt} )
		) final_users
		LEFT OUTER JOIN
			sns_info
		ON
			final_users.id = sns_info.user_id
		INNER JOIN
			auth
		ON
			final_users.id = auth.user_id
		ORDER BY
			final_users.id DESC
	</select>
	
	<select id="findTotalCntForUserPaging" resultType="int">
		SELECT
			COUNT(*)
		FROM
			users
		<include refid="userSearchCriteria"/>		
	</select>
	
	<select id="findUserById" parameterType="long" resultMap="adminUserMap">
		SELECT
			users.*,
			sns_info.*,
			auth.*
		FROM
			users
		LEFT OUTER JOIN
			sns_info
		ON
			users.id = sns_info.user_id
		INNER JOIN
			auth
		ON
			users.id = auth.user_id
		WHERE
			users.id = #{userId}
	</select>
	
	<delete id="deleteUsers" parameterType="list">
		DELETE FROM 
			users
		WHERE
			id IN
		 	<foreach collection="list" item="id" open="(" close=")" separator=",">	
				#{id}
			</foreach>
	</delete>

	<resultMap id="adminBoardMap" type="AdminBoard">
		<association property="board" javaType="Board">
			<id column="id" property="id"/>
			<result column="user_id" property="userId"/>
			<result column="category_code" property="categoryCode"/>
			<result column="title" property="title"/>
			<result column="content" property="content"/>
			<result column="search_content" property="searchContent"/>
			<result column="view_count" property="viewCount"/>
			<result column="comment_count" property="commentCount"/>
			<result column="like_count" property="likeCount"/>
			<result column="created_at" property="createdAt"/>
			<result column="updated_at" property="updatedAt"/>
		</association>
		<association property="user" javaType="User">
			<id column="users_id" property="id"/>
			<result column="email" property="email"/>
			<result column="nickname" property="nickname"/>
			<result column="zipcode" property="zipcode"/>
			<result column="addr" property="addr"/>
			<result column="addr_detail" property="addrDetail"/>
			<result column="agree" property="agree"/>
			<result column="users_created_at" property="createdAt"/>
			<result column="users_updated_at" property="updatedAt"/>
		</association>
		<association property="category" javaType="Category">
			<id column="code" property="code"/>
			<result column="parent_code" property="parentCode"/>
			<result column="name" property="name"/>
			<result column="path" property="path"/>
		</association>
	</resultMap>
	
	<sql id="boardSearchCriteria">
		<where>
			<if test='!categories.empty'>
				board.category_code IN
				<foreach collection="categories" item="categoryCode" open="(" close=")" separator=",">
					${categoryCode}
				</foreach>
			</if>
			<if test='!keyword.empty'>
				<foreach collection='types' item="item" open="AND (" close=")" separator="OR">
					<if test='item.equals("title")'>
						REGEXP_LIKE(board.title, #{keywordRegexp})
					</if>
					<if test='item.equals("content")'>
						REGEXP_LIKE(board.search_content, #{keywordRegexp})
					</if>
					<if test='item.equals("writer")'>
						REGEXP_LIKE(users.nickname, #{keywordRegexp})
					</if> 
				</foreach>
			</if>
		</where>
	</sql>
	
	<sql id="sortHint">
		<if test="'latest'.equals(sort)">
			/*+ INDEX_DESC(board pk_board) */
		</if>
		<if test="'popular'.equals(sort)">
			/*+ INDEX_DESC(board idx_board_like) */
		</if>
		<if test="'view'.equals(sort)">
			/*+ INDEX_DESC(board idx_board_view) */
		</if>
		<if test="'comment'.equals(sort)">
			/*+ INDEX_DESC(board idx_board_comment) */
		</if>
	</sql>
	
	<sql id="orderByClause">
		<if test="'latest'.equals(sort)">
			board.id DESC 
		</if>
		<if test="'popular'.equals(sort)">
			board.like_count DESC, board.id DESC
		</if>
		<if test="'view'.equals(sort)">
			board.view_count DESC, board.id DESC
		</if>
		<if test="'comment'.equals(sort)">
			board.comment_count DESC, board.id DESC
		</if>
	</sql>
	
	<sql id="finalOrderByClause">
		<if test="'latest'.equals(sort)">
			final_board.id DESC 
		</if>
		<if test="'popular'.equals(sort)">
			final_board.like_count DESC, final_board.id DESC
		</if>
		<if test="'view'.equals(sort)">
			final_board.view_count DESC, final_board.id DESC
		</if>
		<if test="'comment'.equals(sort)">
			final_board.comment_count DESC, final_board.id DESC
		</if>
	</sql>

	<select id="findPagedBoards" resultMap="adminBoardMap">
		<choose>
			<!-- not including writer search -->
			<when test="!types.contains('writer')">
				SELECT
					final_board.*,
					users.id			AS users_id,
					users.email,
					users.nickname,
					users.zipcode,
					users.addr,
					users.addr_detail,
					users.agree,
					users.created_at 	AS users_created_at,
					users.updated_at 	AS users_updated_at,
					category.*
				FROM (
					SELECT paged_board.*
					FROM (
						SELECT ROWNUM rn, filterd_board.*
						FROM (
							SELECT <include refid="sortHint"/> board.*
							FROM board 
							<include refid="boardSearchCriteria"/>
							ORDER BY <include refid="orderByClause"/>
						) filterd_board
						WHERE
							ROWNUM <![CDATA[ <= ]]> ( #{page} * #{recordCnt} ) 
					) paged_board
					WHERE 
						paged_board.rn <![CDATA[ > ]]> ( (#{page} - 1) * #{recordCnt} )
				) final_board
				INNER JOIN
					users
				ON
					final_board.user_id = users.id
				INNER JOIN
					category
				ON
					final_board.category_code = category.code
				ORDER BY
					<include refid="finalOrderByClause"/>
			</when>
			<!-- including writer search -->
			<otherwise>
				SELECT final_board.*, category.*
				FROM (
					SELECT paged_board.*
					FROM (
						SELECT ROWNUM rn, filterd_board.*
						FROM (
							SELECT <include refid="sortHint"/>
								board.*,
								users.id			AS users_id,
								users.email,
								users.nickname,
								users.zipcode,
								users.addr,
								users.addr_detail,
								users.agree,
								users.created_at 	AS users_created_at,
								users.updated_at 	AS users_updated_at
							FROM board
							INNER JOIN users ON board.user_id = users.id
							<include refid="boardSearchCriteria"/>
							ORDER BY <include refid="orderByClause"/>
						) filterd_board
						WHERE
							ROWNUM <![CDATA[ <= ]]> ( #{page} * #{recordCnt} )
					) paged_board
					WHERE 
						paged_board.rn <![CDATA[ > ]]> ( (#{page} - 1) * #{recordCnt} )
				) final_board
				INNER JOIN
					category
				ON
					final_board.category_code = category.code
				ORDER BY
					<include refid="finalOrderByClause"/>
			</otherwise>
		</choose>
	</select>

	<!-- join-then-paging + nomalized -->
	<select id="findPagedBoardsV1" resultMap="adminBoardMap">
		WITH
			comment_group AS (
				SELECT board_id, COUNT(*) cnt
				FROM comments
				WHERE status = 1
				GROUP BY board_id
			),
			like_group AS (
				SELECT board_id, COUNT(*) cnt
				FROM board_like
				GROUP BY board_id
			)
		SELECT *
		FROM (
			SELECT paged_board.*
			FROM (
				SELECT 
					ROWNUM rn, 
					board.*,
					users.id					AS users_id,
					users.email,
					users.nickname,
					users.zipcode,
					users.addr,
					users.addr_detail,
					users.agree,
					users.created_at 			AS users_created_at,
					users.updated_at 			AS users_updated_at,
					category.*,
					NVL(comment_group.cnt, 0) 	AS comment_count,
					NVL(like_group.cnt, 0) 		AS like_count,
				FROM (
					SELECT <include refid="sortHint"/> board.*
					FROM board 
					INNER JOIN users ON board.user_id = users.id
					INNER JOIN category ON board.category_code = category.code
					LEFT JOIN comment_group ON board.board_id = comment_group.board_id
					LEFT JOIN like_group ON board.board_id = like_count.board_id
					<include refid="boardSearchCriteria"/>
					ORDER BY <include refid="orderByClause"/>
				) filterd_board
				WHERE
					ROWNUM <![CDATA[ <= ]]> ( #{page} * #{recordCnt} ) 
			) paged_board
			WHERE 
				paged_board.rn <![CDATA[ > ]]> ( (#{page} - 1) * #{recordCnt} )
		)
	</select>
	
	<!-- paging-then-join + nomalized -->
	<select id="findPagedBoardsV2" resultMap="adminBoardMap">
		WITH
			comment_group AS (
				SELECT board_id, COUNT(*) cnt
				FROM comments
				WHERE status = 1
				GROUP BY board_id
			),
			like_group AS (
				SELECT board_id, COUNT(*) cnt
				FROM board_like
				GROUP BY board_id
			)
		SELECT 
			final_board.*,
			users.id					AS users_id,
			users.email,
			users.nickname,
			users.zipcode,
			users.addr,
			users.addr_detail,
			users.agree,
			users.created_at 			AS users_created_at,
			users.updated_at 			AS users_updated_at,
			category.*,
			NVL(comment_group.cnt, 0) 	AS comment_count,
			NVL(like_group.cnt, 0) 		AS like_count,
		FROM (
			SELECT paged_board.*
			FROM (
				SELECT ROWNUM rn, filterd_board.*
				FROM (
					SELECT *
					FROM board
					<include refid="boardSearchCriteria"/>
					ORDER BY <include refid="orderByClause"/>
				) filterd_board
				WHERE
					ROWNUM <![CDATA[ <= ]]> ( #{page} * #{recordCnt} )
			) paged_board
			WHERE 
				paged_board.rn <![CDATA[ > ]]> ( (#{page} - 1) * #{recordCnt} )
		) final_board
		INNER JOIN users ON final_board.user_id = users.id
		INNER JOIN category ON final_board.category_code = category.code
		LEFT JOIN comment_group ON final_board.board_id = comment_group.board_id
		LEFT JOIN like_group ON final_board.board_id = like_count.board_id
		ORDER BY <include refid="finalOrderByClause"/>
	</select>
	
	<select id="findTotalCntForBoardPaging" resultType="int">
		<choose>
			<!-- not including writer search -->
			<when test="!types.contains('writer')"> 
				SELECT COUNT(*)
				FROM board
				<include refid="boardSearchCriteria"/>
			</when>
			<!-- including writer search -->
			<otherwise>
				SELECT COUNT(*)
				FROM board
				INNER JOIN users ON board.user_id = users.id
				<include refid="boardSearchCriteria"/>
			</otherwise>
		</choose>
	</select>
	
	<!-- <select id="findTotalCntForBoardPaging" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		INNER JOIN
			users
		ON
			board.user_id = users.id
		<include refid="boardSearchCriteria"/>
	</select> -->
	
	<delete id="deleteBoards" parameterType="list">
		DELETE FROM 
			board 
		WHERE
			id IN
		 	<foreach collection="list" item="id" open="(" close=")" separator=",">	
				#{id}
			</foreach>
	</delete>
</mapper>