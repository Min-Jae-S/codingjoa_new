<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.AdminMapper">

	<resultMap id="adminBoardMap" type="AdminBoard">
		<id column="board_idx" property="boardIdx"/>
		<result column="board_writer_idx" property="boardWriterIdx"/>
		<result column="board_title" property="boardTitle"/>
		<result column="board_content" property="boardContent"/>
		<result column="board_content_text" property="boardContentText"/>
		<result column="board_category_code" property="boardCategoryCode"/>
		<result column="board_views" property="boardViews"/>
		<result column="created_at" property="createdAt"/>
		<result column="updated_at" property="updatedAt"/>
		<result column="comment_cnt" property="commentCnt"/>
		<result column="likes_cnt" property="likesCnt"/>
		<association property="writer" javaType="member">
			<id column="member_idx" property="memberIdx"/>
			<result column="member_email" property="memberEmail"/>
			<result column="member_nickname" property="memberNickname"/>
			<result column="member_password" property="memberPassword"/>
			<result column="member_zipcode" property="memberZipcode" />
			<result column="member_addr" property="memberAddr" />
			<result column="member_addr_detail" property="memberAddrDetail"/>
			<result column="member_agree" property="memberAgree"/>
			<result column="member_created_at" property="createdAt"/>
			<result column="member_updated_at" property="updatedAt"/>
		</association>
		<association property="category" javaType="category">
			<id column="category_code" property="categoryCode"/>
			<result column="category_parent_code" property="categoryParentCode"/>
			<result column="category_name" property="categoryName"/>
			<result column="category_path" property="categoryPath"/>
		</association>
	</resultMap>
	
	<sql id="searchCriteria">
		<where>
			<if test='!categories.empty'>
				board.board_category_code IN
				<foreach collection="categories" item="categoryCode" open="(" close=")" separator=",">
					${categoryCode}
				</foreach>
			</if>
			<if test='!keyword.empty'>
				<foreach collection='types' item="item" open="AND (" close=")" separator="OR">
					<if test='item.equals("title")'>
						REGEXP_LIKE( board.board_title, #{keywordRegexp} )
					</if>
					<if test='item.equals("content")'>
						REGEXP_LIKE( board.board_content_text, #{keywordRegexp} )
					</if>
					<if test='item.equals("writer")'>
						REGEXP_LIKE( member.member_nickname, #{keywordRegexp} )
					</if> 
				</foreach>
			</if>
		</where>
	</sql>

	<select id="findPagedBoards" resultMap="adminBoardMap">
		SELECT
			paged_board.board_idx,
			paged_board.board_writer_idx,
			paged_board.board_title,
			paged_board.board_content,
			paged_board.board_content_text,
			paged_board.board_category_code,
			paged_board.board_views,
			paged_board.created_at,
			paged_board.updated_at,
			NVL(paged_board.comment_cnt, 0)	AS comment_cnt,
			NVL(paged_board.likes_cnt, 0) 	AS likes_cnt,
			paged_board.member_idx,
			paged_board.member_email,
			paged_board.member_nickname,
			paged_board.member_password,
			paged_board.member_zipcode,
			paged_board.member_addr,
			paged_board.member_addr_detail,
			paged_board.member_agree,
			paged_board.member_created_at,
			paged_board.member_updated_at,
			category.*
		FROM (
			SELECT
				paging_board.*
			FROM (
				SELECT
					ROWNUM rn,
					filterd_board.*
				FROM (
					SELECT
						/*+ INDEX_DESC(board pk_board) */
						board.*,
						member.member_idx,
						member.member_email,
						member.member_nickname,
						member.member_password,
						member.member_zipcode,
						member.member_addr,
						member.member_addr_detail,
						member.member_agree,
						member.created_at 	AS member_created_at,
						member.updated_at 	AS member_updated_at,
						comment_group.cnt 	AS comment_cnt,
						likes_group.cnt		AS likes_cnt
					FROM 
						board board
					INNER JOIN
						member member
					ON
						board.board_writer_idx = member.member_idx
					LEFT OUTER JOIN (
						SELECT board_idx, COUNT(*) cnt FROM "comment" GROUP BY board_idx
					) comment_group
					ON 
						board.board_idx = comment_group.board_idx	
					LEFT OUTER JOIN ( 
						SELECT board_idx, COUNT(*) cnt FROM board_likes GROUP BY board_idx
					) likes_group
					ON 
						board.board_idx = likes_group.board_idx
					<include refid="searchCriteria"/>
					ORDER BY
						<choose>
							<when test="'latest'.equals(sort)">
								board.board_idx DESC
							</when>
							<when test="'popular'.equals(sort)">
								likes_group.cnt DESC, board.board_idx DESC
							</when>
							<when test="'views'.equals(sort)">
								board.board_views DESC, board.board_idx DESC
							</when>
							<when test="'comments'.equals(sort)">
								comment_group.cnt DESC, board.board_idx DESC
							</when>
							<otherwise>
								board.board_idx DESC 
							</otherwise>
						</choose>
				) filterd_board
				WHERE
					<![CDATA[ ROWNUM <= ( #{page} * #{recordCnt} ) ]]>
			) paging_board
			WHERE 
				paging_board.rn > ( (#{page} - 1) * #{recordCnt} )
		) paged_board
		INNER JOIN
			category
		ON
			paged_board.board_category_code = category.category_code
	</select>
	
	<!-- <select id="findPagedBoards" resultMap="adminBoardMap">
		SELECT
			/*+ ORDERED USE_NL(category) USE_NL(comment_group) USE_NL(likes_group) */
			paged_board.*,
			category.*,
			NVL(comment_group.cnt, 0)	AS comment_cnt,
			NVL(likes_group.cnt, 0) 	AS likes_cnt
		FROM (
			SELECT
				filterd_board.*
			FROM (
				SELECT
					/*+ INDEX_DESC(board pk_board) */
					ROWNUM rn,
					board.board_idx,
					board.board_writer_idx,
					board.board_title,
					board.board_content,
					board.board_content_text,
					board.board_category_code,
					board.board_views,
					board.created_at,
					board.updated_at,
					member.member_idx,
					member.member_email,
					member.member_password,
					member.member_nickname,
					member.member_zipcode,
					member.member_addr,
					member.member_addr_detail,
					member.member_agree,
					member.created_at AS member_created_at,
					member.updated_at AS member_updated_at
				FROM 
					board
				INNER JOIN
					member
				ON
					board.board_writer_idx = member.member_idx
				WHERE 
					<include refid="searchCriteria"/>
					<![CDATA[ ROWNUM <= ( #{page} * #{recordCnt} ) ]]>
			) filterd_board
			WHERE 
				filterd_board.rn > ( (#{page} - 1) * #{recordCnt} )
		) paged_board
		INNER JOIN
			category
		ON
			paged_board.board_category_code = category.category_code
		LEFT OUTER JOIN (
			SELECT 
				board_idx, COUNT(*) cnt
			FROM 
				"comment"
			GROUP BY 
				board_idx
		) comment_group
		ON 
			paged_board.board_idx = comment_group.board_idx
		LEFT OUTER JOIN ( 
			SELECT 
				board_idx, COUNT(*) cnt
			FROM 
				board_likes
			GROUP BY 
				board_idx
		) likes_group
		ON 
			paged_board.board_idx = likes_group.board_idx
	</select> -->
	
	<select id="findPagedBoardsTotalCnt" resultType="int">
		SELECT
			COUNT(*)
		FROM
			board
		INNER JOIN
			member
		ON
			board.board_writer_idx = member.member_idx
		<include refid="searchCriteria"/>
	</select>
	
	<delete id="deleteBoards" parameterType="list">
		DELETE FROM 
			board 
		WHERE
			board_idx IN
		 	<foreach collection="list" item="boardIdx" open="(" close=")" separator=",">	
				#{boardIdx}
			</foreach>
	</delete>
</mapper>