<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.CommentMapper">
<!--  
	comment_idx              NUMBER,
    comment_writer_idx       NUMBER                       NOT NULL,
	board_idx                NUMBER                       NOT NULL,
	comment_content          VARCHAR2(2000)               NOT NULL,
    comment_use              CHAR(1)                      NOT NULL,
	created_at               DATE                         NOT NULL,
    updated_at               DATE                         NOT NULL, 		
-->

	<insert id="insertComment" parameterType="comment">
		<selectKey keyProperty="commentIdx" resultType="int" order="BEFORE">
			SELECT seq_comment.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO "comment" (
			comment_idx,
			comment_writer_idx,
			board_idx,
			comment_content,
			comment_use,
			created_at,
			updated_at
		) VALUES (
			#{commentIdx},
			#{commentWriterIdx},
			#{boardIdx},
			#{commentContent},
			#{commentUse},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="commentDetailsMap">
		<!-- java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<id property="commentIdx" column="comment_idx" javaType="int"/>
		<result property="commentContent" column="comment_content" javaType="string"/>
		<result property="commentUse" column="comment_use" javaType="boolean"/>
		<result property="createdAt" column="created_at" javaType="java.time.LocalDateTime"/>
		<result property="updatedAt" column="updated_at" javaType="java.time.LocalDateTime"/>
		<result property="boardWriterIdx" column="board_writer_idx" javaType="int"/>
		<result property="commentWriterNickname" column="comment_writer_nickname" javaType="string"/>
		<result property="commentWriterImageUrl" column="comment_writer_image_url" javaType="string"/>
		<result property="commentLikesCnt" column="comment_likes_cnt" javaType="int"/>
		<result property="isBoardWriter" column="is_board_writer" javaType="boolean"/>
		<result property="isCommentWriter" column="is_comment_writer" javaType="boolean"/>
		<result property="isCommentLiked" column="is_comment_liked" javaType="boolean"/>
	</resultMap>
	
	<select id="findPagedComment" parameterType="map" resultMap="commentDetailsMap">
		SELECT
    		/*+ ORDERED USE_NL(b) USE_NL(c) USE_NL(d) */
			a.comment_idx,
			a.comment_content,
			a.comment_use,
	        a.created_at,
	        a.updated_at,
	        a.board_writer_idx,
    		b.member_nickname 	AS comment_writer_nickname,
    		c.member_image_url 	AS comment_writer_image_url,
    		NVL(d.cnt, 0) 		AS comment_likes_cnt,
    		CASE
    			WHEN a.comment_writer_idx = a.board_writer_idx THEN 1
    			ELSE 0
    		END AS is_board_writer,
    		CASE
    			WHEN a.comment_writer_idx = #{memberIdx} THEN 1
    			ELSE 0
    		END AS is_comment_writer,
    		CASE
    			WHEN EXISTS ( 
    				SELECT 1 
    				FROM comment_likes e 
    				WHERE e.comment_idx = a.comment_idx 
    				AND e.member_idx = #{memberIdx} 
    			) THEN 1
    			ELSE 0
    		END AS is_comment_liked
		FROM (
			SELECT
				a_depth.comment_idx,
				a_depth.comment_writer_idx,
		        a_depth.comment_content,
		        a_depth.comment_use,
		        a_depth.created_at,
		        a_depth.updated_at,
		        a_depth.board_writer_idx
			FROM (
				SELECT
					/*+ INDEX_DESC("comment" pk_comment) */
			        ROWNUM rn, 
			        "comment".comment_idx,
			        "comment".comment_writer_idx,
			        "comment".comment_content, 
			        "comment".comment_use,
			        "comment".created_at,
			        "comment".updated_at,
			        board.board_writer_idx
			    FROM 
			        "comment"
			    INNER JOIN
			    	board
			    ON
			    	"comment".board_idx = board.board_idx
			    WHERE
			    	board.board_idx = #{boardIdx} 
			    AND
					<![CDATA[
					ROWNUM <= ( #{commentCri.page} * #{commentCri.recordCnt} )
					]]>
			) a_depth
			WHERE
				a_depth.rn > ( ( #{commentCri.page} - 1 ) * #{commentCri.recordCnt} )
		) a
		INNER JOIN
			member b
		ON 
			a.comment_writer_idx = b.member_idx
		LEFT OUTER JOIN
			member_image c
		ON
			a.comment_writer_idx = c.member_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx,
				COUNT(*) cnt
			FROM
				comment_likes
			GROUP BY
				comment_idx
		) d
		ON
			a.comment_idx = d.comment_idx
	</select>
	
	<select id="findCommentTotalCnt" resultType="int">
		SELECT
			COUNT(*)
		FROM
			"comment"
		WHERE
			board_idx = #{boardIdx}
	</select>
	
	<select id="findCommentByIdx" resultType="comment">
		SELECT
			*
		FROM
			"comment"
		WHERE
			comment_idx = #{commentIdx}
	</select>
	
	<update id="updateComment" parameterType="comment">
		UPDATE
			"comment"
		SET
			comment_content = #{commentContent},
			updated_at = SYSDATE
		WHERE
			comment_idx = #{commentIdx}
	</update>
	
	<delete id="deleteComment" parameterType="comment">
		UPDATE
			"comment"
		SET
			comment_use = #{commentUse},
			updated_at = SYSDATE
		WHERE
			comment_idx = #{commentIdx}
	</delete>
	
</mapper>