<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.CommentMapper">
<!-- 
## comments 
	id              NUMBER,
	board_id        NUMBER                      NOT NULL,
    user_id         NUMBER                      NOT NULL,
	content         VARCHAR2(2000)              NOT NULL,
    status          CHAR(1)                     NOT NULL,
    like_count      NUMBER          DEFAULT 0   NOT NULL,       
	created_at      DATE                        NOT NULL,
    updated_at      DATE                        NOT NULL,		
-->

	<insert id="insertComment" parameterType="Comment">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT seq_comments.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO comments (
			id,
			board_id,
			user_id,
			content,
			status,
			created_at,
			updated_at
		) VALUES (
			#{id},
			#{boardId},
			#{userId},
			#{content},
			#{status},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="commentDetailsMap">
		<!-- java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<id column="id" property="id" javaType="long"/>
		<result column="content" property="content" javaType="string"/>
		<result column="status" property="status" javaType="boolean"/>
		<result column="like_count" property="likeCount" javaType="int"/>
		<result column="created_at" property="createdAt" javaType="java.time.LocalDateTime"/>
		<result column="updated_at" property="updatedAt" javaType="java.time.LocalDateTime"/>
		<result column="writer_nickname" property="writerNickname" javaType="string"/>
		<result column="writer_image_path" property="writerImagePath" javaType="string"/>
		<result column="is_writer" property="isWriter" javaType="boolean"/>
		<result column="is_liked" property="isLiked" javaType="boolean"/>
		<result column="is_board_writer" property="isBoardWriter" javaType="boolean"/>
	</resultMap>
	
	<!-- USE_NL(b) USE_NL(c) USE_NL(d)  -->
	<select id="findPagedComments" parameterType="map" resultMap="commentDetailsMap">
		SELECT
    		/*+ ORDERED */
			final_comment.id,
			final_comment.content,
			final_comment.status,
			final_comment.like_count,
	        final_comment.created_at,
	        final_comment.updated_at,
	        users.nickname 			AS writer_nickname,
	        latest_user_image.path 	AS writer_image_path,
    		CASE
    			WHEN final_comment.user_id = #{userId} THEN 1
    			ELSE 0
    		END AS is_writer,
    		CASE
    			WHEN EXISTS ( 
    				SELECT 1 
    				FROM comment_like
    				WHERE comment_like.comment_id = final_comment.id 
    				AND comment_like.user_id = #{userId} 
    			) THEN 1
    			ELSE 0
    		END AS is_liked,
    		CASE
    			WHEN final_comment.user_id = board.user_id THEN 1
    			ELSE 0
    		END AS is_board_writer
		FROM (
			SELECT
				paged_comment.*
			FROM (
				SELECT
					ROWNUM rn,
					sorted_comment.*
				FROM (
					SELECT
						/*+ INDEX_DESC(comments pk_comments) */
				        id,
				        board_id,
				        user_id,
				        content,
				        status,
				        like_count,
				        created_at,
				       	updated_at
				    FROM 
				        comments
				    WHERE
				    	board_id = #{boardId}
				    ORDER BY
				    	id DESC
				) sorted_comment
				WHERE
					<![CDATA[ ROWNUM <= ( #{commentCri.page} * #{commentCri.recordCnt} ) ]]>
			) paged_comment
			WHERE
				paged_comment.rn > ( (#{commentCri.page} - 1 ) * #{commentCri.recordCnt} )
		) final_comment
		INNER JOIN
			users
		ON 
			final_comment.user_id = users.id
		LEFT OUTER JOIN (
			SELECT
				user_id, path
			FROM
				user_image
			WHERE 
				id IN ( SELECT MAX(id) FROM user_image GROUP BY user_id )
		) latest_user_image
		ON
			final_comment.user_id = latest_user_image.user_id
		INNER JOIN
			board
		ON
			final_comment.board_id = board.id
	</select>
	
	<select id="findPagingCommentCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			comments
		WHERE
			board_id = #{boardId}
	</select>
	
	<select id="findCommentById" resultType="Comment">
		SELECT
			*
		FROM
			comments
		WHERE
			id = #{id}
	</select>
	
	<update id="updateComment" parameterType="Comment">
		UPDATE
			comments
		SET
			content = #{content},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<delete id="deleteComment" parameterType="Comment">
		UPDATE
			comments
		SET
			status = #{status},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</delete>
	
	<update id="increaseLikeCount" parameterType="long">
		UPDATE
			comments
		SET
			like_count = like_count + 1
		WHERE
			id = #{id}
	</update>

	<update id="decreaseLikeCount" parameterType="long">
		UPDATE
			comments
		SET
			like_count = like_count - 1
		WHERE
			id = #{id}
	</update>
	
</mapper>