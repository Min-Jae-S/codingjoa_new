<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.CommentMapper">
<!--  
	id              NUMBER,
	board_id        NUMBER                      NOT NULL,
    user_id         NUMBER                      NOT NULL,
	content         VARCHAR2(2000)              NOT NULL,
    status          CHAR(1)                     NOT NULL,
    like_count      NUMBER          DEFAULT 0   NOT NULL,       
	created_at      DATE                        NOT NULL,
    updated_at      DATE                        NOT NULL,		
-->

	<insert id="insertComment" parameterType="Comment">
		<selectKey keyProperty="commentIdx" resultType="long" order="BEFORE">
			SELECT seq_comments.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO comments (
			id,
			board_id,
			user_id,
			content,
			status,
			created_at,
			updated_at
		) VALUES (
			#{id},
			#{boardId},
			#{userId},
			#{content},
			#{status},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<resultMap type="map" id="commentDetailsMap">
		<!-- java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<id property="commentIdx" column="comment_idx" javaType="int"/>
		<result property="commentContent" column="comment_content" javaType="string"/>
		<result property="commentUse" column="comment_use" javaType="boolean"/>
		<result property="createdAt" column="created_at" javaType="java.time.LocalDateTime"/>
		<result property="updatedAt" column="updated_at" javaType="java.time.LocalDateTime"/>
		<result property="boardWriterIdx" column="board_writer_idx" javaType="int"/>
		<result property="commentWriterNickname" column="comment_writer_nickname" javaType="string"/>
		<result property="commentWriterImageUrl" column="comment_writer_image_url" javaType="string"/>
		<result property="commentLikesCnt" column="comment_likes_cnt" javaType="int"/>
		<result property="isBoardWriter" column="is_board_writer" javaType="boolean"/>
		<result property="isCommentWriter" column="is_comment_writer" javaType="boolean"/>
		<result property="isCommentLiked" column="is_comment_liked" javaType="boolean"/>
	</resultMap>
	
	<select id="findPagedComments" parameterType="map" resultMap="commentDetailsMap">
		SELECT
    		/*+ ORDERED USE_NL(b) USE_NL(c) USE_NL(d) */
			paged_comment.comment_idx,
			paged_comment.comment_content,
			paged_comment.comment_use,
	        paged_comment.created_at,
	        paged_comment.updated_at,
	        paged_comment.board_writer_idx,
    		member.member_nickname 			AS comment_writer_nickname,
    		member_image.member_image_url 	AS comment_writer_image_url,
    		NVL(likes_group.cnt, 0) 		AS comment_likes_cnt,
    		CASE
    			WHEN paged_comment.comment_writer_idx = paged_comment.board_writer_idx THEN 1
    			ELSE 0
    		END AS is_board_writer,
    		CASE
    			WHEN paged_comment.comment_writer_idx = #{memberIdx} THEN 1
    			ELSE 0
    		END AS is_comment_writer,
    		CASE
    			WHEN EXISTS ( 
    				SELECT 1 
    				FROM 
    					comment_likes 
    				WHERE 
    					comment_likes.comment_idx = paged_comment.comment_idx 
    				AND 
    					comment_likes.member_idx = #{memberIdx} 
    			) THEN 1
    			ELSE 0
    		END AS is_comment_liked
		FROM (
			SELECT
				filtered_comment.*
			FROM (
				SELECT
					/*+ INDEX_DESC("comment" pk_comment) */
			        ROWNUM rn, 
			        "comment".comment_idx,
			        "comment".comment_writer_idx,
			        "comment".comment_content, 
			        "comment".comment_use,
			        "comment".created_at,
			        "comment".updated_at,
			        board.board_writer_idx
			    FROM 
			        "comment"
			    INNER JOIN
			    	board
			    ON
			    	"comment".board_idx = board.board_idx
			    WHERE
			    	board.board_idx = #{boardIdx} 
			    AND
					<![CDATA[ ROWNUM <= ( #{commentCri.page} * #{commentCri.recordCnt} ) ]]>
			) filtered_comment
			WHERE
				filtered_comment.rn > ( ( #{commentCri.page} - 1 ) * #{commentCri.recordCnt} )
		) paged_comment
		INNER JOIN
			member
		ON 
			paged_comment.comment_writer_idx = member.member_idx
		LEFT OUTER JOIN
			member_image
		ON
			paged_comment.comment_writer_idx = member_image.member_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx,
				COUNT(*) cnt
			FROM
				comment_likes
			GROUP BY
				comment_idx
		) likes_group
		ON
			paged_comment.comment_idx = likes_group.comment_idx
	</select>
	
	<select id="findCommentTotalCnt" resultType="long">
		SELECT
			COUNT(*)
		FROM
			comments
		WHERE
			board_id = #{boardId}
	</select>
	
	<select id="findCommentById" resultType="Comment">
		SELECT
			*
		FROM
			comments
		WHERE
			comment_id = #{commentId}
	</select>
	
	<update id="updateComment" parameterType="Comment">
		UPDATE
			comments
		SET
			content = #{content},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</update>
	
	<delete id="deleteComment" parameterType="Comment">
		UPDATE
			comments
		SET
			status = #{status},
			updated_at = SYSDATE
		WHERE
			id = #{id}
	</delete>
	
</mapper>