<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.codingjoa.mapper.CommentMapper">
<!--  
	comment_idx              NUMBER,
    member_idx               NUMBER                       NOT NULL,
	board_idx                NUMBER                       NOT NULL,
	comment_content          VARCHAR2(2000)               NOT NULL,
    comment_use              CHAR(1)                      NOT NULL,
	created_at               DATE                         NOT NULL,
    updated_at               DATE                         NOT NULL,
-->
	<insert id="insertComment" parameterType="comment">
		<selectKey keyProperty="commentIdx" resultType="int" order="BEFORE">
			SELECT seq_comment.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO "comment" (
			comment_idx,
			member_idx,
			board_idx,
			comment_content,
			comment_use,
			created_at,
			updated_at
		) VALUES (
			#{commentIdx},
			#{memberIdx},
			#{boardIdx},
			#{commentContent},
			#{commentUse},
			SYSDATE,
			SYSDATE
		)
	</insert>

	<!-- <insert id="insertComment" parameterType="comment">
		<selectKey keyProperty="commentBoardIdx" resultType="int" order="BEFORE">
			SELECT 
				MAX(board_idx)
			FROM 
				board 
			WHERE 
				board_idx = #{commentBoardIdx}
		</selectKey>
		BEGIN
			IF #{commentBoardIdx} IS NOT NULL THEN 
				INSERT INTO "comment" (
					comment_idx,
					comment_writer_idx,
					comment_board_idx,
					comment_content,
					comment_use,
					regdate,
					moddate
				) VALUES (
					seq_comment.NEXTVAL,
					#{commentWriterIdx},
					#{commentBoardIdx},
					#{commentContent},
					#{commentUse},
					SYSDATE,
					SYSDATE
				);
			END IF;
		END;
		
		
		INSERT INTO "comment" (
			comment_idx,
			comment_writer_idx,
			comment_board_idx,
			comment_content,
			comment_use,
			regdate,
			moddate
		) SELECT 
			seq_comment.NEXTVAL,
			#{commentWriterIdx},
			#{commentBoardIdx},
			#{commentContent},
			#{commentUse},
			SYSDATE,
			SYSDATE,
		FROM
			DUAL
		WHERE 
			#{commentBoardIdx} IS NOT NULL 
	</insert> -->
	
	<resultMap type="map" id="commentDetailsMap">
		<!-- java.math.BigDecimal cannot be cast to class java.lang.Integer -->
		<!-- javaType >>  java.lang.Integer -->
		<id property="commentIdx" column="comment_idx" javaType="int"/>
		<result property="memberIdx" column="member_idx" javaType="int"/>
		<result property="commentContent" column="comment_content" javaType="string"/>
		<result property="commentUse" column="comment_use" javaType="boolean"/>
		<result property="createdAt" column="created_at" javaType="java.time.LocalDateTime"/>
		<result property="updatedAt" column="updated_at" javaType="java.time.LocalDateTime"/>
		<result property="memberNickname" column="member_nickname" javaType="string"/>
		<result property="commentLike" column="comment_like" javaType="boolean"/>
	</resultMap>
	
	<select id="findPagedComment" parameterType="map" resultMap="commentDetailsMap">
		SELECT
    		/*+ ORDERED USE_NL(b) USE_NL(c) USE_NL(d) */
			a.comment_idx,
			a.member_idx,
			a.comment_content,
			a.comment_use,
	        a.created_at,
	        a.updated_at,
    		b.member_nickname,
    		NVL(c.cnt, 0) AS comment_likes_cnt,
    		CASE 
    			WHEN d.comment_idx IS NOT NULL THEN 1 
    			ELSE 0 
    		END AS comment_like
		FROM (
			SELECT
				a_depth.comment_idx,
		        a_depth.member_idx,
		        a_depth.comment_content, 
		        a_depth.comment_use,
		        a_depth.created_at,
		        a_depth.updated_at
			FROM (
				SELECT
					/*+ INDEX_DESC("comment" pk_comment) */
			        ROWNUM rn, 
			        comment_idx,
			        member_idx,
			        comment_content, 
			        comment_use,
			        created_at,
			        updated_at
			    FROM 
			        "comment"
			    WHERE
			    	board_idx = #{boardIdx} 
			    AND
					<![CDATA[
					ROWNUM <= ( #{commentCri.page} * #{commentCri.recordCnt} )
					]]>
			) a_depth
			WHERE
				a_depth.rn > ( ( #{commentCri.page} - 1 ) * #{commentCri.recordCnt} )
		) a
		INNER JOIN
			member b
		ON 
			a.member_idx = b.member_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx, 
				COUNT(*) cnt
			FROM
				comment_likes
			GROUP BY
				comment_idx	
		) c
		ON
			a.comment_idx = c.comment_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx
			FROM
				comment_likes
			WHERE
				member_idx = #{memberIdx}
		) d
		ON
			a.comment_idx = d.comment_idx
	</select>

	<!-- <select id="findPagedComment" parameterType="map" resultMap="commentDetailsMap">
		SELECT
    		/*+ LEADING(b) INDEX_DESC(a pk_comment) */ 
			a.comment_idx,
			a.member_idx, 
			a.board_idx,
			a.comment_content,
			a.comment_use,
	        a.created_at,
	        a.updated_at,
    		b.member_id AS comment_writer_id,
    		NVL(c.cnt, 0) AS comment_likes_cnt
		FROM (
		    SELECT
		        ROWNUM rn, 
		        comment_idx,
		        member_idx,
		       	board_idx,
		        comment_content, 
		        comment_use,
		        created_at,
		        updated_at
		    FROM 
		        "comment"
		    WHERE
		    	board_idx = #{boardIdx} 
		    	AND
				<![CDATA[
				ROWNUM <= ( #{commentCri.page} * #{commentCri.recordCnt} )
				]]>
		) a
		INNER JOIN
			member b
		ON 
			a.member_idx = b.member_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx, 
				COUNT(*) cnt
			FROM
				comment_likes
			GROUP BY
				comment_idx	
		) c
		ON
			a.comment_idx = c.comment_idx
		WHERE 
			a.rn > ( ( #{commentCri.page} - 1 ) * #{commentCri.recordCnt} )
	</select> -->
	
	<select id="findCommentTotalCnt" resultType="int">
		SELECT
			COUNT(*)
		FROM
			"comment"
		WHERE
			board_idx = #{boardIdx}
	</select>
	
	<select id="findCommentDetails" parameterType="map" resultMap="commentDetailsMap">
		SELECT
			a.comment_idx,
			a.member_idx,
			a.comment_content,
			a.comment_use,
	        a.created_at,
	        a.updated_at,
    		b.member_nickname,
    		NVL(c.cnt, 0) AS comment_likes_cnt,
    		CASE 
    			WHEN d.comment_idx IS NOT NULL THEN 1 
    			ELSE 0 
    		END AS comment_like
		FROM
			"comment" a
		INNER JOIN
			member b
		ON
			a.member_idx = b.member_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx, 
				COUNT(*) cnt
			FROM
				comment_likes
			GROUP BY
				comment_idx	
		) c
		ON
			a.comment_idx = c.comment_idx
		LEFT OUTER JOIN (
			SELECT
				comment_idx
			FROM
				comment_likes
			WHERE
				member_idx = #{memberIdx}	
		) d
		ON
			a.comment_idx = d.comment_idx
		WHERE
			a.comment_idx = #{commentIdx}
	</select>
	
	<select id="findCommentByIdx" resultType="comment">
		SELECT
			*
		FROM
			"comment"
		WHERE
			comment_idx = #{commentIdx}
	</select>
	
	<update id="updateComment" parameterType="comment">
		UPDATE
			"comment"
		SET
			comment_content = #{commentContent},
			updated_at = SYSDATE
		WHERE
			comment_idx = #{commentIdx}
	</update>
	
	<!-- <update id="updateComment" parameterType="comment">
		<selectKey keyProperty="commentIdx,commentWriterIdx,commentUse" resultType="comment" order="BEFORE">
			SELECT
				MAX(comment_idx) AS comment_idx,
				MAX(member_idx) AS member_idx,
				MAX(comment_use) AS comment_use
			FROM
				"comment" 
			WHERE 
				comment_idx = #{commentIdx}
		</selectKey>
		BEGIN
			IF #{commentIdx} IS NOT NULL THEN 
				UPDATE
					"comment"
				SET
					comment_content = #{commentContent},
					updated_at = SYSDATE
				WHERE
					comment_idx = #{commentIdx};
			END IF;
		END;
	</update> -->
	
	<delete id="deleteComment" parameterType="comment">
		UPDATE
			"comment"
		SET
			comment_use = #{commentUse},
			updated_at = SYSDATE
		WHERE
			comment_idx = #{commentIdx}
	</delete>

	<!-- <update id="deleteComment" parameterType="comment">
		<selectKey keyProperty="commentIdx,commentWriterIdx,commentUse" resultType="comment" order="BEFORE">
			SELECT
				MAX(comment_idx) AS comment_idx,
				MAX(member_idx) AS member_idx,
				MAX(comment_use) AS comment_use
			FROM
				"comment" 
			WHERE 
				comment_idx = #{commentIdx}
		</selectKey>
		BEGIN
			IF #{commentIdx} IS NOT NULL THEN 
				UPDATE
					"comment"
				SET
					comment_use = 0,
					updated_at = SYSDATE
				WHERE
					comment_idx = #{commentIdx};
			END IF;
		END;
	</update> -->
	
</mapper>