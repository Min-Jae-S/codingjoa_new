<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
		<!-- StatementTimeout vs TransactionTimeout -->
		<!-- <setting name="defaultStatementTimeout" value="60"/> -->
	
		<!-- 해당 컬럼이 null 허용일 경우 null인 상태로 insert나 update를 처리해주는 설정, 부적합한 열 유형: 1111 -->
		<!-- 1. JdbcType(#{columnNm, jdbcType=VARCHAR) 2. mybatis-config.xml-->
		<setting name="jdbcTypeForNull" value="NULL"/>
		
		<!-- 컬럼명으로 snake case를 사용하는 경우 필드의 camel case 변수명으로 mapping  -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		
		<!-- MyBatis, by default, returns null when all the columns of a returned row are NULL. 
		When this setting is enabled, MyBatis returns an empty instance instead. 
		Note that it is also applied to nested results (i.e. collectioin and association). Since: 3.4.2 -->
		<!-- 가져온 Row 의 컬럼 데이터 전체가 Null 이어도 컬럼별 NULL 데이터를 생성한다. -->
		<!-- 다음의 sql에서 comment_idx, comment_writer_idx, comment_use가 모두 null인 경우 -->
		<!-- <selectKey keyProperty="commentIdx,commentWriterIdx,commentUse" resultType="comment" order="BEFORE">
			SELECT
				MAX(comment_idx) AS comment_idx,
				MAX(comment_writer_idx) AS comment_writer_idx,
				MAX(comment_use) AS comment_use
			FROM
				"comment" 
			WHERE 
				comment_idx = #{commentIdx}
		</selectKey> -->
		<setting name="returnInstanceForEmptyRow" value="true"/>
		
		<!-- 가져온 컬럼의 데이터가 Null 이어도 Setter를 통해 데이터를 바인딩 한다. -->
		<!-- userDetailsMap(memberImageName) -->
		<setting name="callSettersOnNulls" value="true"/>
	</settings>
	
	<typeAliases>
		<!-- entity -->
		<typeAlias type="com.codingjoa.entity.User" alias="User"/>
		<typeAlias type="com.codingjoa.entity.Auth" alias="Auth"/>
		<typeAlias type="com.codingjoa.entity.SnsInfo" alias="SnsInfo"/>
		<typeAlias type="com.codingjoa.entity.Category" alias="Category"/>
		<typeAlias type="com.codingjoa.entity.Board" alias="Board"/>
		<typeAlias type="com.codingjoa.entity.BoardImage" alias="BoardImage"/>
		<typeAlias type="com.codingjoa.entity.UserImage" alias="UserImage"/>
		<typeAlias type="com.codingjoa.entity.Comment" alias="Comment"/>
		<typeAlias type="com.codingjoa.entity.BoardLike" alias="BoardLike"/>
		<typeAlias type="com.codingjoa.entity.CommentLike" alias="CommentLike"/>

		<!-- pagination -->
		<!-- <typeAlias type="com.codingjoa.pagination.BoardCriteria" alias="BoardCri"/> -->
		<!-- <typeAlias type="com.codingjoa.pagination.CommentCriteria" alias="CommentCri"/> -->
		
		<!-- admin -->
		<typeAlias type="com.codingjoa.entity.AdminUser" alias="AdminUser"/>
		<typeAlias type="com.codingjoa.entity.AdminBoard" alias="AdminBoard"/>
		<typeAlias type="com.codingjoa.entity.AdminComment" alias="Adminomment"/>

		<!-- test -->
		<typeAlias type="com.codingjoa.test.TestVo" alias="testVo"/>
		<typeAlias type="com.codingjoa.test.TestApiResponseData" alias="testApiResponseData"/>
		<typeAlias type="com.codingjoa.test.TestSchedulerData" alias="testSchedulerData"/>
		
		<!-- <typeAlias type="com.codingjoa.mybatis.ClobTypeHandler" alias="clobTypeHandler"/> -->
	</typeAliases>
	
	<!--
	# CLOB을 String으로 반환하는 방법
		- TypeHander 등록해서 사용하기 
		- 별도의 타입핸들러 등록없이 사용하기 (Oracle 10g 이상), javaType과 jdbcType 설정 필요
	-->
	
	<!-- <typeHandlers>
		<typeHandler handler="com.codingjoa.mybatis.ClobTypeHandler" javaType="String" jdbcType="LONGVARCHAR"/>
		<typeHandler handler="com.codingjoa.mybatis.ClobTypeHandler" javaType="String" jdbcType="CLOB"/>
	</typeHandlers> -->
</configuration>
